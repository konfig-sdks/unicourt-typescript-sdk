/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Exception } from '../models';
// @ts-ignore
import { PACERImportCase } from '../models';
// @ts-ignore
import { PCLCase } from '../models';
// @ts-ignore
import { PCLParty } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PacerApiApi - axios parameter creator
 * @export
 */
export const PacerApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Import the specified case from PACER.    Workflow:     1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.     2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.    Note:     1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.     2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
         * @summary Find PACER Case for a requested Case Number and Court.
         * @param {string} pacerUserId The PACER username of the PACER account under which the case should be imported.
         * @param {string} pacerClientCode The PACER client code under which the case should be imported.
         * @param {string} caseNumber The case number of the case to be imported.
         * @param {string} courtId The courtId value of the court from which the case is to be imported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPacerCaseByCourtUsingCaseNumberGet: async (pacerUserId: string, pacerClientCode: string, caseNumber: string, courtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('importPacerCaseByCourtUsingCaseNumberGet', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('importPacerCaseByCourtUsingCaseNumberGet', 'pacerClientCode', pacerClientCode)
            // verify required parameter 'caseNumber' is not null or undefined
            assertParamExists('importPacerCaseByCourtUsingCaseNumberGet', 'caseNumber', caseNumber)
            // verify required parameter 'courtId' is not null or undefined
            assertParamExists('importPacerCaseByCourtUsingCaseNumberGet', 'courtId', courtId)
            const localVarPath = `/pacer/importCaseByCourtUsingCaseNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (courtId !== undefined) {
                localVarQueryParameter['courtId'] = courtId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacer/importCaseByCourtUsingCaseNumber',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search all courts within the PACER system for a particular case.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAllCourtsCases: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchAllCourtsCases', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchAllCourtsCases', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/caseSearch/allCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/caseSearch/allCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for the specified party across all PACER case filings.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [lastName] The last name (for an individual) or the entity name (for a business entity) of the target party.
         * @param {string} [firstName] The first name of the target party.
         * @param {string} [middleName] The middle name of the target party.
         * @param {string} [generation] The suffix (e.g., Jr., III) of the target party\&#39;s name.
         * @param {string} [partyType] The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {boolean} [partyExactNameMatch] Specify whether the search string must match the name of the target party exactly.
         * @param {Array<string>} [partyRoleArray] The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case.
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {number} [caseYearFrom] Limit the results of the search to those cases from the year specified or later
         * @param {number} [caseYearTo] Limit the results of the search to those cases from the year specified or earlier
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAllCourtsCases_1: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchAllCourtsCases_1', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchAllCourtsCases_1', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/partySearch/allCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }

            if (partyType !== undefined) {
                localVarQueryParameter['partyType'] = partyType;
            }

            if (partyExactNameMatch !== undefined) {
                localVarQueryParameter['partyExactNameMatch'] = partyExactNameMatch;
            }

            if (partyRoleArray) {
                localVarQueryParameter['partyRoleArray'] = partyRoleArray;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseYearFrom !== undefined) {
                localVarQueryParameter['caseYearFrom'] = caseYearFrom;
            }

            if (caseYearTo !== undefined) {
                localVarQueryParameter['caseYearTo'] = caseYearTo;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/partySearch/allCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for PACER cases filed in U.S. Courts of Appeals.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [natureOfSuitsArray] The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases in U.S. Courts of Appeals.    Scenario: When mulitple nature of suits needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the nature of suit 1110 (Insurance) and 1150 (Overpayments &amp; Enforc. of Judgments), My query in the request will look like the example mentioned below.    Example: natureOfSuitsArray&#x3D;1110&amp;natureOfSuitsArray&#x3D;1150
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAppealCourtsCases: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchAppealCourtsCases', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchAppealCourtsCases', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/caseSearch/appealCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (natureOfSuitsArray) {
                localVarQueryParameter['natureOfSuitsArray'] = natureOfSuitsArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/caseSearch/appealCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for the specified party across all PACER appeals cases.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [lastName] The last name (for an individual) or the entity name (for a business entity) of the target party.
         * @param {string} [firstName] The first name of the target party.
         * @param {string} [middleName] The middle name of the target party.
         * @param {string} [generation] The suffix (e.g., Jr., III) of the target party\&#39;s name.
         * @param {string} [partyType] The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {boolean} [partyExactNameMatch] Specify whether the search string must match the name of the target party exactly.
         * @param {Array<string>} [partyRoleArray] The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {number} [caseYearFrom] Limit the results of the search to those cases from the year specified or later
         * @param {number} [caseYearTo] Limit the results of the search to those cases from the year specified or earlier
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAppealCourtsCases_2: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchAppealCourtsCases_2', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchAppealCourtsCases_2', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/partySearch/appealCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }

            if (partyType !== undefined) {
                localVarQueryParameter['partyType'] = partyType;
            }

            if (partyExactNameMatch !== undefined) {
                localVarQueryParameter['partyExactNameMatch'] = partyExactNameMatch;
            }

            if (partyRoleArray) {
                localVarQueryParameter['partyRoleArray'] = partyRoleArray;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseYearFrom !== undefined) {
                localVarQueryParameter['caseYearFrom'] = caseYearFrom;
            }

            if (caseYearTo !== undefined) {
                localVarQueryParameter['caseYearTo'] = caseYearTo;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/partySearch/appealCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for PACER cases filed in U.S. Bankruptcy Courts.
         * @summary PACER Case Locator Search API for Bankruptcy Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [federalBankruptcyChapterArray] The chapter of the U.S. Bankruptcy Code under which the target case was filed. Please see Appendix D for a list of valid chapter numbers.    Scenario: When mulitple Federal Bankruptcy Chapters needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the Federal Bankruptcy Chapters 7 (Chapter 7) and 11 (Chapter 11), My query in the request will look like the example mentioned below.    Example: federalBankruptcyChapterArray&#x3D;7&amp;federalBankruptcyChapterArray&#x3D;11
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseDischargedStartDate] The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
         * @param {string} [caseDischargedEndDate] The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
         * @param {string} [caseDismissedStartDate] The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
         * @param {string} [caseDismissedEndDate] The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBankruptcyCases: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, federalBankruptcyChapterArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, caseDischargedStartDate?: string, caseDischargedEndDate?: string, caseDismissedStartDate?: string, caseDismissedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchBankruptcyCases', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchBankruptcyCases', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/caseSearch/bankruptcyCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (federalBankruptcyChapterArray) {
                localVarQueryParameter['federalBankruptcyChapterArray'] = federalBankruptcyChapterArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (caseDischargedStartDate !== undefined) {
                localVarQueryParameter['caseDischargedStartDate'] = (caseDischargedStartDate as any instanceof Date) ?
                    (caseDischargedStartDate as any).toISOString() :
                    caseDischargedStartDate;
            }

            if (caseDischargedEndDate !== undefined) {
                localVarQueryParameter['caseDischargedEndDate'] = (caseDischargedEndDate as any instanceof Date) ?
                    (caseDischargedEndDate as any).toISOString() :
                    caseDischargedEndDate;
            }

            if (caseDismissedStartDate !== undefined) {
                localVarQueryParameter['caseDismissedStartDate'] = (caseDismissedStartDate as any instanceof Date) ?
                    (caseDismissedStartDate as any).toISOString() :
                    caseDismissedStartDate;
            }

            if (caseDismissedEndDate !== undefined) {
                localVarQueryParameter['caseDismissedEndDate'] = (caseDismissedEndDate as any instanceof Date) ?
                    (caseDismissedEndDate as any).toISOString() :
                    caseDismissedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/caseSearch/bankruptcyCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for the specified party in PACER bankruptcy filings.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [lastName] The last name (for an individual) or the entity name (for a business entity) of the target party.
         * @param {string} [firstName] The first name of the target party.
         * @param {string} [middleName] The middle name of the target party.
         * @param {string} [generation] The suffix (e.g., Jr., III) of the target party\&#39;s name.
         * @param {string} [partyType] The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {boolean} [partyExactNameMatch] Specify whether the search string must match the name of the target party exactly.
         * @param {Array<string>} [partyRoleArray] The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {number} [caseYearFrom] Limit the results of the search to those cases from the year specified or later
         * @param {number} [caseYearTo] Limit the results of the search to those cases from the year specified or earlier
         * @param {string} [ssnOrEin] The Social Security number or the federal Employer Identification Number of the target party. Either number can be entered with or without dashes.
         * @param {string} [fourDigitSsn] The last four digits of the Social Security number of the target party.   Note: When specified, a last name/entity name must also be specified.
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseDischargedStartDate] The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
         * @param {string} [caseDischargedEndDate] The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
         * @param {string} [caseDismissedStartDate] The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
         * @param {string} [caseDismissedEndDate] The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBankruptcyCourts: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, ssnOrEin?: string, fourDigitSsn?: string, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, caseDischargedStartDate?: string, caseDischargedEndDate?: string, caseDismissedStartDate?: string, caseDismissedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchBankruptcyCourts', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchBankruptcyCourts', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/partySearch/bankruptcyCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }

            if (partyType !== undefined) {
                localVarQueryParameter['partyType'] = partyType;
            }

            if (partyExactNameMatch !== undefined) {
                localVarQueryParameter['partyExactNameMatch'] = partyExactNameMatch;
            }

            if (partyRoleArray) {
                localVarQueryParameter['partyRoleArray'] = partyRoleArray;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseYearFrom !== undefined) {
                localVarQueryParameter['caseYearFrom'] = caseYearFrom;
            }

            if (caseYearTo !== undefined) {
                localVarQueryParameter['caseYearTo'] = caseYearTo;
            }

            if (ssnOrEin !== undefined) {
                localVarQueryParameter['ssnOrEin'] = ssnOrEin;
            }

            if (fourDigitSsn !== undefined) {
                localVarQueryParameter['fourDigitSsn'] = fourDigitSsn;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (caseDischargedStartDate !== undefined) {
                localVarQueryParameter['caseDischargedStartDate'] = (caseDischargedStartDate as any instanceof Date) ?
                    (caseDischargedStartDate as any).toISOString() :
                    caseDischargedStartDate;
            }

            if (caseDischargedEndDate !== undefined) {
                localVarQueryParameter['caseDischargedEndDate'] = (caseDischargedEndDate as any instanceof Date) ?
                    (caseDischargedEndDate as any).toISOString() :
                    caseDischargedEndDate;
            }

            if (caseDismissedStartDate !== undefined) {
                localVarQueryParameter['caseDismissedStartDate'] = (caseDismissedStartDate as any instanceof Date) ?
                    (caseDismissedStartDate as any).toISOString() :
                    caseDismissedStartDate;
            }

            if (caseDismissedEndDate !== undefined) {
                localVarQueryParameter['caseDismissedEndDate'] = (caseDismissedEndDate as any instanceof Date) ?
                    (caseDismissedEndDate as any).toISOString() :
                    caseDismissedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/partySearch/bankruptcyCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for civil cases filed in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case.
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [natureOfSuitsArray] The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases.    Scenario: When mulitple nature of suits needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the nature of suit 110 (Insurance) and 140 (Negotiable Instrument), My query in the request will look like the example mentioned below.    Example: natureOfSuitsArray&#x3D;110&amp;natureOfSuitsArray&#x3D;140
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCivilCases: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchCivilCases', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchCivilCases', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/caseSearch/civilCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (natureOfSuitsArray) {
                localVarQueryParameter['natureOfSuitsArray'] = natureOfSuitsArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/caseSearch/civilCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for the specified party in civil cases filed in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [lastName] The last name (for an individual) or the entity name (for a business entity) of the target party.
         * @param {string} [firstName] The first name of the target party.
         * @param {string} [middleName] The middle name of the target party.
         * @param {string} [generation] The name suffix (e.g., III, MD).
         * @param {string} [partyType] The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {boolean} [partyExactNameMatch] Specify whether the search string must match the name of the target party exactly.
         * @param {Array<string>} [partyRoleArray] The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {number} [caseYearFrom] Limit the results of the search to those cases from the year specified or later
         * @param {number} [caseYearTo] Limit the results of the search to those cases from the year specified or earlier
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCivilCasesInCourts: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchCivilCasesInCourts', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchCivilCasesInCourts', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/partySearch/civilCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }

            if (partyType !== undefined) {
                localVarQueryParameter['partyType'] = partyType;
            }

            if (partyExactNameMatch !== undefined) {
                localVarQueryParameter['partyExactNameMatch'] = partyExactNameMatch;
            }

            if (partyRoleArray) {
                localVarQueryParameter['partyRoleArray'] = partyRoleArray;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseYearFrom !== undefined) {
                localVarQueryParameter['caseYearFrom'] = caseYearFrom;
            }

            if (caseYearTo !== undefined) {
                localVarQueryParameter['caseYearTo'] = caseYearTo;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/partySearch/civilCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for criminal cases in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCriminalCases: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchCriminalCases', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchCriminalCases', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/caseSearch/criminalCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/caseSearch/criminalCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for the specified party in PACER criminal cases.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [lastName] The last name (for an individual) or the entity name (for a business entity) of the target party.
         * @param {string} [firstName] The first name of the target party.
         * @param {string} [middleName] The middle name of the target party.
         * @param {string} [generation] The suffix (e.g., Jr., III) of the target party\&#39;s name.
         * @param {string} [partyType] The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {boolean} [partyExactNameMatch] Specify whether the search string must match the name of the target party exactly.
         * @param {Array<string>} [partyRoleArray] The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {number} [caseYearFrom] Limit the results of the search to those cases from the year specified or later
         * @param {number} [caseYearTo] Limit the results of the search to those cases from the year specified or earlier
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCriminalCases_3: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchCriminalCases_3', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchCriminalCases_3', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/partySearch/criminalCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }

            if (partyType !== undefined) {
                localVarQueryParameter['partyType'] = partyType;
            }

            if (partyExactNameMatch !== undefined) {
                localVarQueryParameter['partyExactNameMatch'] = partyExactNameMatch;
            }

            if (partyRoleArray) {
                localVarQueryParameter['partyRoleArray'] = partyRoleArray;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseYearFrom !== undefined) {
                localVarQueryParameter['caseYearFrom'] = caseYearFrom;
            }

            if (caseYearTo !== undefined) {
                localVarQueryParameter['caseYearTo'] = caseYearTo;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/partySearch/criminalCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for multidistrict litigation in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [jpmlNumber] Master JPML Case Number.
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMultiDistrictCourtCases: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchMultiDistrictCourtCases', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchMultiDistrictCourtCases', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/caseSearch/multiDistrictCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (jpmlNumber !== undefined) {
                localVarQueryParameter['jpmlNumber'] = jpmlNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/caseSearch/multiDistrictCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for the specified party in multidistrict litigation in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {string} pacerUserId The username of the PACER account under which the search is to be performed.
         * @param {string} pacerClientCode The PACER client code under which the search is to be performed.
         * @param {string} [caseNumber] The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
         * @param {number} [jpmlNumber] Master JPML Case Number.
         * @param {number} [pacerCaseId] The PACER-assigned identifier of the target case.
         * @param {string} [lastName] The last name (for an individual) or the entity name (for a business entity) of the target party.
         * @param {string} [firstName] The first name of the target party.
         * @param {string} [middleName] The middle name of the target party.
         * @param {string} [generation] The suffix (e.g., Jr., III) of the target party\&#39;s name.
         * @param {string} [partyType] The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {boolean} [partyExactNameMatch] Specify whether the search string must match the name of the target party exactly.
         * @param {Array<string>} [partyRoleArray] The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
         * @param {string} [caseTitle] The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
         * @param {number} [caseOffice] The divisional office in which the case was filed.
         * @param {number} [caseSequenceNumber] The PACER-assigned sequence number of the target case. Ex 12345
         * @param {number} [caseYear] The two- or four-digit year in which the target case was filed.
         * @param {Array<string>} [caseTypeArray] The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr
         * @param {Array<string>} [courtRegionIdArray] The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae
         * @param {number} [caseYearFrom] Limit the results of the search to those cases from the year specified or later
         * @param {number} [caseYearTo] Limit the results of the search to those cases from the year specified or earlier
         * @param {string} [caseFiledStartDate] The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseFiledEndDate] The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedStartDate] The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [caseTerminatedEndDate] The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
         * @param {string} [sortParameterQuery] How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC
         * @param {'open' | 'closed'} [caseStatus] Whether the target case is marked as \&#39;open\&#39; or \&#39;closed\&#39; within PACER.
         * @param {number} [pageNumber] The page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMultiDistrictCourtCases_4: async (pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: string, caseFiledEndDate?: string, caseTerminatedStartDate?: string, caseTerminatedEndDate?: string, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('searchMultiDistrictCourtCases_4', 'pacerUserId', pacerUserId)
            // verify required parameter 'pacerClientCode' is not null or undefined
            assertParamExists('searchMultiDistrictCourtCases_4', 'pacerClientCode', pacerClientCode)
            const localVarPath = `/pacerCaseLocator/partySearch/multiDistrictCourts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pacerUserId !== undefined) {
                localVarQueryParameter['pacerUserId'] = pacerUserId;
            }

            if (pacerClientCode !== undefined) {
                localVarQueryParameter['pacerClientCode'] = pacerClientCode;
            }

            if (caseNumber !== undefined) {
                localVarQueryParameter['caseNumber'] = caseNumber;
            }

            if (jpmlNumber !== undefined) {
                localVarQueryParameter['jpmlNumber'] = jpmlNumber;
            }

            if (pacerCaseId !== undefined) {
                localVarQueryParameter['pacerCaseId'] = pacerCaseId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middleName'] = middleName;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }

            if (partyType !== undefined) {
                localVarQueryParameter['partyType'] = partyType;
            }

            if (partyExactNameMatch !== undefined) {
                localVarQueryParameter['partyExactNameMatch'] = partyExactNameMatch;
            }

            if (partyRoleArray) {
                localVarQueryParameter['partyRoleArray'] = partyRoleArray;
            }

            if (caseTitle !== undefined) {
                localVarQueryParameter['caseTitle'] = caseTitle;
            }

            if (caseOffice !== undefined) {
                localVarQueryParameter['caseOffice'] = caseOffice;
            }

            if (caseSequenceNumber !== undefined) {
                localVarQueryParameter['caseSequenceNumber'] = caseSequenceNumber;
            }

            if (caseYear !== undefined) {
                localVarQueryParameter['caseYear'] = caseYear;
            }

            if (caseTypeArray) {
                localVarQueryParameter['caseTypeArray'] = caseTypeArray;
            }

            if (courtRegionIdArray) {
                localVarQueryParameter['courtRegionIdArray'] = courtRegionIdArray;
            }

            if (caseYearFrom !== undefined) {
                localVarQueryParameter['caseYearFrom'] = caseYearFrom;
            }

            if (caseYearTo !== undefined) {
                localVarQueryParameter['caseYearTo'] = caseYearTo;
            }

            if (caseFiledStartDate !== undefined) {
                localVarQueryParameter['caseFiledStartDate'] = (caseFiledStartDate as any instanceof Date) ?
                    (caseFiledStartDate as any).toISOString() :
                    caseFiledStartDate;
            }

            if (caseFiledEndDate !== undefined) {
                localVarQueryParameter['caseFiledEndDate'] = (caseFiledEndDate as any instanceof Date) ?
                    (caseFiledEndDate as any).toISOString() :
                    caseFiledEndDate;
            }

            if (caseTerminatedStartDate !== undefined) {
                localVarQueryParameter['caseTerminatedStartDate'] = (caseTerminatedStartDate as any instanceof Date) ?
                    (caseTerminatedStartDate as any).toISOString() :
                    caseTerminatedStartDate;
            }

            if (caseTerminatedEndDate !== undefined) {
                localVarQueryParameter['caseTerminatedEndDate'] = (caseTerminatedEndDate as any instanceof Date) ?
                    (caseTerminatedEndDate as any).toISOString() :
                    caseTerminatedEndDate;
            }

            if (sortParameterQuery !== undefined) {
                localVarQueryParameter['sortParameterQuery'] = sortParameterQuery;
            }

            if (caseStatus !== undefined) {
                localVarQueryParameter['caseStatus'] = caseStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCaseLocator/partySearch/multiDistrictCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PacerApiApi - functional programming interface
 * @export
 */
export const PacerApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PacerApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Import the specified case from PACER.    Workflow:     1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.     2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.    Note:     1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.     2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
         * @summary Find PACER Case for a requested Case Number and Court.
         * @param {PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importPacerCaseByCourtUsingCaseNumberGet(requestParameters: PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PACERImportCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importPacerCaseByCourtUsingCaseNumberGet(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.courtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search all courts within the PACER system for a particular case.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAllCourtsCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAllCourtsCases(requestParameters: PacerApiApiSearchAllCourtsCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAllCourtsCases(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for the specified party across all PACER case filings.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAllCourtsCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAllCourtsCases_1(requestParameters: PacerApiApiSearchAllCourtsCases0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAllCourtsCases_1(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.lastName, requestParameters.firstName, requestParameters.middleName, requestParameters.generation, requestParameters.partyType, requestParameters.partyExactNameMatch, requestParameters.partyRoleArray, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseYearFrom, requestParameters.caseYearTo, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for PACER cases filed in U.S. Courts of Appeals.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAppealCourtsCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAppealCourtsCases(requestParameters: PacerApiApiSearchAppealCourtsCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAppealCourtsCases(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.natureOfSuitsArray, requestParameters.courtRegionIdArray, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for the specified party across all PACER appeals cases.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAppealCourtsCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAppealCourtsCases_2(requestParameters: PacerApiApiSearchAppealCourtsCases0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAppealCourtsCases_2(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.lastName, requestParameters.firstName, requestParameters.middleName, requestParameters.generation, requestParameters.partyType, requestParameters.partyExactNameMatch, requestParameters.partyRoleArray, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseYearFrom, requestParameters.caseYearTo, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for PACER cases filed in U.S. Bankruptcy Courts.
         * @summary PACER Case Locator Search API for Bankruptcy Courts.
         * @param {PacerApiApiSearchBankruptcyCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBankruptcyCases(requestParameters: PacerApiApiSearchBankruptcyCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBankruptcyCases(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.federalBankruptcyChapterArray, requestParameters.courtRegionIdArray, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.caseDischargedStartDate, requestParameters.caseDischargedEndDate, requestParameters.caseDismissedStartDate, requestParameters.caseDismissedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for the specified party in PACER bankruptcy filings.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchBankruptcyCourtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBankruptcyCourts(requestParameters: PacerApiApiSearchBankruptcyCourtsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBankruptcyCourts(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.lastName, requestParameters.firstName, requestParameters.middleName, requestParameters.generation, requestParameters.partyType, requestParameters.partyExactNameMatch, requestParameters.partyRoleArray, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseYearFrom, requestParameters.caseYearTo, requestParameters.ssnOrEin, requestParameters.fourDigitSsn, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.caseDischargedStartDate, requestParameters.caseDischargedEndDate, requestParameters.caseDismissedStartDate, requestParameters.caseDismissedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for civil cases filed in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCivilCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCivilCases(requestParameters: PacerApiApiSearchCivilCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCivilCases(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.natureOfSuitsArray, requestParameters.courtRegionIdArray, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for the specified party in civil cases filed in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCivilCasesInCourtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCivilCasesInCourts(requestParameters: PacerApiApiSearchCivilCasesInCourtsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCivilCasesInCourts(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.lastName, requestParameters.firstName, requestParameters.middleName, requestParameters.generation, requestParameters.partyType, requestParameters.partyExactNameMatch, requestParameters.partyRoleArray, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseYearFrom, requestParameters.caseYearTo, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for criminal cases in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCriminalCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCriminalCases(requestParameters: PacerApiApiSearchCriminalCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCriminalCases(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for the specified party in PACER criminal cases.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCriminalCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCriminalCases_3(requestParameters: PacerApiApiSearchCriminalCases0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCriminalCases_3(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.pacerCaseId, requestParameters.lastName, requestParameters.firstName, requestParameters.middleName, requestParameters.generation, requestParameters.partyType, requestParameters.partyExactNameMatch, requestParameters.partyRoleArray, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseYearFrom, requestParameters.caseYearTo, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for multidistrict litigation in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchMultiDistrictCourtCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMultiDistrictCourtCases(requestParameters: PacerApiApiSearchMultiDistrictCourtCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMultiDistrictCourtCases(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.jpmlNumber, requestParameters.pacerCaseId, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for the specified party in multidistrict litigation in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchMultiDistrictCourtCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMultiDistrictCourtCases_4(requestParameters: PacerApiApiSearchMultiDistrictCourtCases0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PCLParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMultiDistrictCourtCases_4(requestParameters.pacerUserId, requestParameters.pacerClientCode, requestParameters.caseNumber, requestParameters.jpmlNumber, requestParameters.pacerCaseId, requestParameters.lastName, requestParameters.firstName, requestParameters.middleName, requestParameters.generation, requestParameters.partyType, requestParameters.partyExactNameMatch, requestParameters.partyRoleArray, requestParameters.caseTitle, requestParameters.caseOffice, requestParameters.caseSequenceNumber, requestParameters.caseYear, requestParameters.caseTypeArray, requestParameters.courtRegionIdArray, requestParameters.caseYearFrom, requestParameters.caseYearTo, requestParameters.caseFiledStartDate, requestParameters.caseFiledEndDate, requestParameters.caseTerminatedStartDate, requestParameters.caseTerminatedEndDate, requestParameters.sortParameterQuery, requestParameters.caseStatus, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PacerApiApi - factory interface
 * @export
 */
export const PacerApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PacerApiApiFp(configuration)
    return {
        /**
         * Import the specified case from PACER.    Workflow:     1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.     2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.    Note:     1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.     2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
         * @summary Find PACER Case for a requested Case Number and Court.
         * @param {PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPacerCaseByCourtUsingCaseNumberGet(requestParameters: PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest, options?: AxiosRequestConfig): AxiosPromise<PACERImportCase> {
            return localVarFp.importPacerCaseByCourtUsingCaseNumberGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search all courts within the PACER system for a particular case.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAllCourtsCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAllCourtsCases(requestParameters: PacerApiApiSearchAllCourtsCasesRequest, options?: AxiosRequestConfig): AxiosPromise<PCLCase> {
            return localVarFp.searchAllCourtsCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for the specified party across all PACER case filings.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAllCourtsCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAllCourtsCases_1(requestParameters: PacerApiApiSearchAllCourtsCases0Request, options?: AxiosRequestConfig): AxiosPromise<PCLParty> {
            return localVarFp.searchAllCourtsCases_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for PACER cases filed in U.S. Courts of Appeals.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAppealCourtsCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAppealCourtsCases(requestParameters: PacerApiApiSearchAppealCourtsCasesRequest, options?: AxiosRequestConfig): AxiosPromise<PCLCase> {
            return localVarFp.searchAppealCourtsCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for the specified party across all PACER appeals cases.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchAppealCourtsCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAppealCourtsCases_2(requestParameters: PacerApiApiSearchAppealCourtsCases0Request, options?: AxiosRequestConfig): AxiosPromise<PCLParty> {
            return localVarFp.searchAppealCourtsCases_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for PACER cases filed in U.S. Bankruptcy Courts.
         * @summary PACER Case Locator Search API for Bankruptcy Courts.
         * @param {PacerApiApiSearchBankruptcyCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBankruptcyCases(requestParameters: PacerApiApiSearchBankruptcyCasesRequest, options?: AxiosRequestConfig): AxiosPromise<PCLCase> {
            return localVarFp.searchBankruptcyCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for the specified party in PACER bankruptcy filings.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchBankruptcyCourtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBankruptcyCourts(requestParameters: PacerApiApiSearchBankruptcyCourtsRequest, options?: AxiosRequestConfig): AxiosPromise<PCLParty> {
            return localVarFp.searchBankruptcyCourts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for civil cases filed in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCivilCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCivilCases(requestParameters: PacerApiApiSearchCivilCasesRequest, options?: AxiosRequestConfig): AxiosPromise<PCLCase> {
            return localVarFp.searchCivilCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for the specified party in civil cases filed in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCivilCasesInCourtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCivilCasesInCourts(requestParameters: PacerApiApiSearchCivilCasesInCourtsRequest, options?: AxiosRequestConfig): AxiosPromise<PCLParty> {
            return localVarFp.searchCivilCasesInCourts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for criminal cases in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCriminalCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCriminalCases(requestParameters: PacerApiApiSearchCriminalCasesRequest, options?: AxiosRequestConfig): AxiosPromise<PCLCase> {
            return localVarFp.searchCriminalCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for the specified party in PACER criminal cases.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchCriminalCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCriminalCases_3(requestParameters: PacerApiApiSearchCriminalCases0Request, options?: AxiosRequestConfig): AxiosPromise<PCLParty> {
            return localVarFp.searchCriminalCases_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for multidistrict litigation in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchMultiDistrictCourtCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMultiDistrictCourtCases(requestParameters: PacerApiApiSearchMultiDistrictCourtCasesRequest, options?: AxiosRequestConfig): AxiosPromise<PCLCase> {
            return localVarFp.searchMultiDistrictCourtCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for the specified party in multidistrict litigation in PACER.
         * @summary PACER Case Locator Search API for All Courts.
         * @param {PacerApiApiSearchMultiDistrictCourtCases0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMultiDistrictCourtCases_4(requestParameters: PacerApiApiSearchMultiDistrictCourtCases0Request, options?: AxiosRequestConfig): AxiosPromise<PCLParty> {
            return localVarFp.searchMultiDistrictCourtCases_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for importPacerCaseByCourtUsingCaseNumberGet operation in PacerApiApi.
 * @export
 * @interface PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest
 */
export type PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest = {
    
    /**
    * The PACER username of the PACER account under which the case should be imported.
    * @type {string}
    * @memberof PacerApiApiImportPacerCaseByCourtUsingCaseNumberGet
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the case should be imported.
    * @type {string}
    * @memberof PacerApiApiImportPacerCaseByCourtUsingCaseNumberGet
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the case to be imported.
    * @type {string}
    * @memberof PacerApiApiImportPacerCaseByCourtUsingCaseNumberGet
    */
    readonly caseNumber: string
    
    /**
    * The courtId value of the court from which the case is to be imported.
    * @type {string}
    * @memberof PacerApiApiImportPacerCaseByCourtUsingCaseNumberGet
    */
    readonly courtId: string
    
}

/**
 * Request parameters for searchAllCourtsCases operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchAllCourtsCasesRequest
 */
export type PacerApiApiSearchAllCourtsCasesRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly pacerCaseId?: number
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchAllCourtsCases_1 operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchAllCourtsCases0Request
 */
export type PacerApiApiSearchAllCourtsCases0Request = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly pacerCaseId?: number
    
    /**
    * The last name (for an individual) or the entity name (for a business entity) of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly lastName?: string
    
    /**
    * The first name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly firstName?: string
    
    /**
    * The middle name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly middleName?: string
    
    /**
    * The suffix (e.g., Jr., III) of the target party\'s name.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly generation?: string
    
    /**
    * The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly partyType?: string
    
    /**
    * Specify whether the search string must match the name of the target party exactly.
    * @type {boolean}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly partyExactNameMatch?: boolean
    
    /**
    * The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly partyRoleArray?: Array<string>
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * Limit the results of the search to those cases from the year specified or later
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseYearFrom?: number
    
    /**
    * Limit the results of the search to those cases from the year specified or earlier
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseYearTo?: number
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
    * @type {string}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchAllCourtsCases0
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchAppealCourtsCases operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchAppealCourtsCasesRequest
 */
export type PacerApiApiSearchAppealCourtsCasesRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly pacerCaseId?: number
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases in U.S. Courts of Appeals.    Scenario: When mulitple nature of suits needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the nature of suit 1110 (Insurance) and 1150 (Overpayments & Enforc. of Judgments), My query in the request will look like the example mentioned below.    Example: natureOfSuitsArray=1110&natureOfSuitsArray=1150
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly natureOfSuitsArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchAppealCourtsCases_2 operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchAppealCourtsCases0Request
 */
export type PacerApiApiSearchAppealCourtsCases0Request = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly pacerCaseId?: number
    
    /**
    * The last name (for an individual) or the entity name (for a business entity) of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly lastName?: string
    
    /**
    * The first name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly firstName?: string
    
    /**
    * The middle name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly middleName?: string
    
    /**
    * The suffix (e.g., Jr., III) of the target party\'s name.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly generation?: string
    
    /**
    * The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly partyType?: string
    
    /**
    * Specify whether the search string must match the name of the target party exactly.
    * @type {boolean}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly partyExactNameMatch?: boolean
    
    /**
    * The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly partyRoleArray?: Array<string>
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * Limit the results of the search to those cases from the year specified or later
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseYearFrom?: number
    
    /**
    * Limit the results of the search to those cases from the year specified or earlier
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseYearTo?: number
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
    * @type {string}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchAppealCourtsCases0
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchBankruptcyCases operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchBankruptcyCasesRequest
 */
export type PacerApiApiSearchBankruptcyCasesRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly pacerCaseId?: number
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The chapter of the U.S. Bankruptcy Code under which the target case was filed. Please see Appendix D for a list of valid chapter numbers.    Scenario: When mulitple Federal Bankruptcy Chapters needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the Federal Bankruptcy Chapters 7 (Chapter 7) and 11 (Chapter 11), My query in the request will look like the example mentioned below.    Example: federalBankruptcyChapterArray=7&federalBankruptcyChapterArray=11
    * @type {Array<string>}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly federalBankruptcyChapterArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseDischargedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseDischargedEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseDismissedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseDismissedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchBankruptcyCourts operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchBankruptcyCourtsRequest
 */
export type PacerApiApiSearchBankruptcyCourtsRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly pacerCaseId?: number
    
    /**
    * The last name (for an individual) or the entity name (for a business entity) of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly lastName?: string
    
    /**
    * The first name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly firstName?: string
    
    /**
    * The middle name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly middleName?: string
    
    /**
    * The suffix (e.g., Jr., III) of the target party\'s name.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly generation?: string
    
    /**
    * The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly partyType?: string
    
    /**
    * Specify whether the search string must match the name of the target party exactly.
    * @type {boolean}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly partyExactNameMatch?: boolean
    
    /**
    * The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {Array<string>}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly partyRoleArray?: Array<string>
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * Limit the results of the search to those cases from the year specified or later
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseYearFrom?: number
    
    /**
    * Limit the results of the search to those cases from the year specified or earlier
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseYearTo?: number
    
    /**
    * The Social Security number or the federal Employer Identification Number of the target party. Either number can be entered with or without dashes.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly ssnOrEin?: string
    
    /**
    * The last four digits of the Social Security number of the target party.   Note: When specified, a last name/entity name must also be specified.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly fourDigitSsn?: string
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseDischargedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseDischargedEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseDismissedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseDismissedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
    * @type {string}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchBankruptcyCourts
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchCivilCases operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchCivilCasesRequest
 */
export type PacerApiApiSearchCivilCasesRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly pacerCaseId?: number
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases.    Scenario: When mulitple nature of suits needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the nature of suit 110 (Insurance) and 140 (Negotiable Instrument), My query in the request will look like the example mentioned below.    Example: natureOfSuitsArray=110&natureOfSuitsArray=140
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly natureOfSuitsArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC
    * @type {string}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchCivilCasesInCourts operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchCivilCasesInCourtsRequest
 */
export type PacerApiApiSearchCivilCasesInCourtsRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly pacerCaseId?: number
    
    /**
    * The last name (for an individual) or the entity name (for a business entity) of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly lastName?: string
    
    /**
    * The first name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly firstName?: string
    
    /**
    * The middle name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly middleName?: string
    
    /**
    * The name suffix (e.g., III, MD).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly generation?: string
    
    /**
    * The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly partyType?: string
    
    /**
    * Specify whether the search string must match the name of the target party exactly.
    * @type {boolean}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly partyExactNameMatch?: boolean
    
    /**
    * The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly partyRoleArray?: Array<string>
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * Limit the results of the search to those cases from the year specified or later
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseYearFrom?: number
    
    /**
    * Limit the results of the search to those cases from the year specified or earlier
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseYearTo?: number
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
    * @type {string}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchCivilCasesInCourts
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchCriminalCases operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchCriminalCasesRequest
 */
export type PacerApiApiSearchCriminalCasesRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly pacerCaseId?: number
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchCriminalCases_3 operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchCriminalCases0Request
 */
export type PacerApiApiSearchCriminalCases0Request = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseNumber?: string
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly pacerCaseId?: number
    
    /**
    * The last name (for an individual) or the entity name (for a business entity) of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly lastName?: string
    
    /**
    * The first name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly firstName?: string
    
    /**
    * The middle name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly middleName?: string
    
    /**
    * The suffix (e.g., Jr., III) of the target party\'s name.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly generation?: string
    
    /**
    * The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly partyType?: string
    
    /**
    * Specify whether the search string must match the name of the target party exactly.
    * @type {boolean}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly partyExactNameMatch?: boolean
    
    /**
    * The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly partyRoleArray?: Array<string>
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * Limit the results of the search to those cases from the year specified or later
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseYearFrom?: number
    
    /**
    * Limit the results of the search to those cases from the year specified or earlier
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseYearTo?: number
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
    * @type {string}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchCriminalCases0
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchMultiDistrictCourtCases operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchMultiDistrictCourtCasesRequest
 */
export type PacerApiApiSearchMultiDistrictCourtCasesRequest = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseNumber?: string
    
    /**
    * Master JPML Case Number.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly jpmlNumber?: number
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly pacerCaseId?: number
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for searchMultiDistrictCourtCases_4 operation in PacerApiApi.
 * @export
 * @interface PacerApiApiSearchMultiDistrictCourtCases0Request
 */
export type PacerApiApiSearchMultiDistrictCourtCases0Request = {
    
    /**
    * The username of the PACER account under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly pacerUserId: string
    
    /**
    * The PACER client code under which the search is to be performed.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly pacerClientCode: string
    
    /**
    * The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseNumber?: string
    
    /**
    * Master JPML Case Number.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly jpmlNumber?: number
    
    /**
    * The PACER-assigned identifier of the target case.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly pacerCaseId?: number
    
    /**
    * The last name (for an individual) or the entity name (for a business entity) of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly lastName?: string
    
    /**
    * The first name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly firstName?: string
    
    /**
    * The middle name of the target party.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly middleName?: string
    
    /**
    * The suffix (e.g., Jr., III) of the target party\'s name.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly generation?: string
    
    /**
    * The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly partyType?: string
    
    /**
    * Specify whether the search string must match the name of the target party exactly.
    * @type {boolean}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly partyExactNameMatch?: boolean
    
    /**
    * The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
    * @type {Array<string>}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly partyRoleArray?: Array<string>
    
    /**
    * The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseTitle?: string
    
    /**
    * The divisional office in which the case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseOffice?: number
    
    /**
    * The PACER-assigned sequence number of the target case. Ex 12345
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseSequenceNumber?: number
    
    /**
    * The two- or four-digit year in which the target case was filed.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseYear?: number
    
    /**
    * The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray=cv&caseTypeArray=cr
    * @type {Array<string>}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseTypeArray?: Array<string>
    
    /**
    * The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray=cac&courtRegionIdArray=cae
    * @type {Array<string>}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly courtRegionIdArray?: Array<string>
    
    /**
    * Limit the results of the search to those cases from the year specified or later
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseYearFrom?: number
    
    /**
    * Limit the results of the search to those cases from the year specified or earlier
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseYearTo?: number
    
    /**
    * The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseFiledStartDate?: string
    
    /**
    * The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseFiledEndDate?: string
    
    /**
    * The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseTerminatedStartDate?: string
    
    /**
    * The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseTerminatedEndDate?: string
    
    /**
    * How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtId,ASC&caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
    * @type {string}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly sortParameterQuery?: string
    
    /**
    * Whether the target case is marked as \'open\' or \'closed\' within PACER.
    * @type {'open' | 'closed'}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly caseStatus?: 'open' | 'closed'
    
    /**
    * The page number of the search results to be retrieved.
    * @type {number}
    * @memberof PacerApiApiSearchMultiDistrictCourtCases0
    */
    readonly pageNumber?: number
    
}

/**
 * PacerApiApiGenerated - object-oriented interface
 * @export
 * @class PacerApiApiGenerated
 * @extends {BaseAPI}
 */
export class PacerApiApiGenerated extends BaseAPI {
    /**
     * Import the specified case from PACER.    Workflow:     1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.     2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.    Note:     1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.     2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
     * @summary Find PACER Case for a requested Case Number and Court.
     * @param {PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public importPacerCaseByCourtUsingCaseNumberGet(requestParameters: PacerApiApiImportPacerCaseByCourtUsingCaseNumberGetRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).importPacerCaseByCourtUsingCaseNumberGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search all courts within the PACER system for a particular case.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchAllCourtsCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchAllCourtsCases(requestParameters: PacerApiApiSearchAllCourtsCasesRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchAllCourtsCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for the specified party across all PACER case filings.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchAllCourtsCases0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchAllCourtsCases_1(requestParameters: PacerApiApiSearchAllCourtsCases0Request, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchAllCourtsCases_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for PACER cases filed in U.S. Courts of Appeals.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchAppealCourtsCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchAppealCourtsCases(requestParameters: PacerApiApiSearchAppealCourtsCasesRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchAppealCourtsCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for the specified party across all PACER appeals cases.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchAppealCourtsCases0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchAppealCourtsCases_2(requestParameters: PacerApiApiSearchAppealCourtsCases0Request, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchAppealCourtsCases_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for PACER cases filed in U.S. Bankruptcy Courts.
     * @summary PACER Case Locator Search API for Bankruptcy Courts.
     * @param {PacerApiApiSearchBankruptcyCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchBankruptcyCases(requestParameters: PacerApiApiSearchBankruptcyCasesRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchBankruptcyCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for the specified party in PACER bankruptcy filings.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchBankruptcyCourtsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchBankruptcyCourts(requestParameters: PacerApiApiSearchBankruptcyCourtsRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchBankruptcyCourts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for civil cases filed in PACER.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchCivilCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchCivilCases(requestParameters: PacerApiApiSearchCivilCasesRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchCivilCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for the specified party in civil cases filed in PACER.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchCivilCasesInCourtsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchCivilCasesInCourts(requestParameters: PacerApiApiSearchCivilCasesInCourtsRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchCivilCasesInCourts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for criminal cases in PACER.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchCriminalCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchCriminalCases(requestParameters: PacerApiApiSearchCriminalCasesRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchCriminalCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for the specified party in PACER criminal cases.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchCriminalCases0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchCriminalCases_3(requestParameters: PacerApiApiSearchCriminalCases0Request, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchCriminalCases_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for multidistrict litigation in PACER.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchMultiDistrictCourtCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchMultiDistrictCourtCases(requestParameters: PacerApiApiSearchMultiDistrictCourtCasesRequest, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchMultiDistrictCourtCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for the specified party in multidistrict litigation in PACER.
     * @summary PACER Case Locator Search API for All Courts.
     * @param {PacerApiApiSearchMultiDistrictCourtCases0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerApiApiGenerated
     */
    public searchMultiDistrictCourtCases_4(requestParameters: PacerApiApiSearchMultiDistrictCourtCases0Request, options?: AxiosRequestConfig) {
        return PacerApiApiFp(this.configuration).searchMultiDistrictCourtCases_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
