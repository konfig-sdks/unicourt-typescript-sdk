/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BillingCycleUsageResponse } from '../models';
// @ts-ignore
import { BillingCyclesResponse } from '../models';
// @ts-ignore
import { DailyUsageResponse } from '../models';
// @ts-ignore
import { Exception } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsageApiApi - axios parameter creator
 * @export
 */
export const UsageApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * An endpoint to obtain information on API usage for a specific billing cycle.
         * @summary Specify the billing cycle to know the API usage.
         * @param {string} billingCycle The date obtainable from the /billingCycles endpoint which is used as an identifier for the specific billing cycle you wish to obtain information on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsageByBillingCycle: async (billingCycle: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingCycle' is not null or undefined
            assertParamExists('getApiUsageByBillingCycle', 'billingCycle', billingCycle)
            const localVarPath = `/billingCycleUsage/{billingCycle}`
                .replace(`{${"billingCycle"}}`, encodeURIComponent(String(billingCycle !== undefined ? billingCycle : `-billingCycle-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/billingCycleUsage/{billingCycle}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An endpoint to obtain information on API usage for a specific day.
         * @summary Get API usage for a requested Date.
         * @param {string | Date} date The specific date for which you wish to obtain information on API usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsageByDate: async (date: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getApiUsageByDate', 'date', date)
            const localVarPath = `/dailyUsage/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date !== undefined ? date : `-date-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dailyUsage/{date}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An endpoint to obtain information on the previous 12 billing cycles.
         * @summary Get all the previous 12 billing cycles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPreviousBillingCycles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/billingCycles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/billingCycles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageApiApi - functional programming interface
 * @export
 */
export const UsageApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageApiApiAxiosParamCreator(configuration)
    return {
        /**
         * An endpoint to obtain information on API usage for a specific billing cycle.
         * @summary Specify the billing cycle to know the API usage.
         * @param {UsageApiApiGetApiUsageByBillingCycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUsageByBillingCycle(requestParameters: UsageApiApiGetApiUsageByBillingCycleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingCycleUsageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiUsageByBillingCycle(requestParameters.billingCycle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An endpoint to obtain information on API usage for a specific day.
         * @summary Get API usage for a requested Date.
         * @param {UsageApiApiGetApiUsageByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUsageByDate(requestParameters: UsageApiApiGetApiUsageByDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyUsageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiUsageByDate(requestParameters.date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An endpoint to obtain information on the previous 12 billing cycles.
         * @summary Get all the previous 12 billing cycles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPreviousBillingCycles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingCyclesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPreviousBillingCycles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsageApiApi - factory interface
 * @export
 */
export const UsageApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageApiApiFp(configuration)
    return {
        /**
         * An endpoint to obtain information on API usage for a specific billing cycle.
         * @summary Specify the billing cycle to know the API usage.
         * @param {UsageApiApiGetApiUsageByBillingCycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsageByBillingCycle(requestParameters: UsageApiApiGetApiUsageByBillingCycleRequest, options?: AxiosRequestConfig): AxiosPromise<BillingCycleUsageResponse> {
            return localVarFp.getApiUsageByBillingCycle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An endpoint to obtain information on API usage for a specific day.
         * @summary Get API usage for a requested Date.
         * @param {UsageApiApiGetApiUsageByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsageByDate(requestParameters: UsageApiApiGetApiUsageByDateRequest, options?: AxiosRequestConfig): AxiosPromise<DailyUsageResponse> {
            return localVarFp.getApiUsageByDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An endpoint to obtain information on the previous 12 billing cycles.
         * @summary Get all the previous 12 billing cycles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPreviousBillingCycles(options?: AxiosRequestConfig): AxiosPromise<BillingCyclesResponse> {
            return localVarFp.listPreviousBillingCycles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getApiUsageByBillingCycle operation in UsageApiApi.
 * @export
 * @interface UsageApiApiGetApiUsageByBillingCycleRequest
 */
export type UsageApiApiGetApiUsageByBillingCycleRequest = {
    
    /**
    * The date obtainable from the /billingCycles endpoint which is used as an identifier for the specific billing cycle you wish to obtain information on.
    * @type {string}
    * @memberof UsageApiApiGetApiUsageByBillingCycle
    */
    readonly billingCycle: string
    
}

/**
 * Request parameters for getApiUsageByDate operation in UsageApiApi.
 * @export
 * @interface UsageApiApiGetApiUsageByDateRequest
 */
export type UsageApiApiGetApiUsageByDateRequest = {
    
    /**
    * The specific date for which you wish to obtain information on API usage.
    * @type {string | Date}
    * @memberof UsageApiApiGetApiUsageByDate
    */
    readonly date: string | Date
    
}

/**
 * UsageApiApiGenerated - object-oriented interface
 * @export
 * @class UsageApiApiGenerated
 * @extends {BaseAPI}
 */
export class UsageApiApiGenerated extends BaseAPI {
    /**
     * An endpoint to obtain information on API usage for a specific billing cycle.
     * @summary Specify the billing cycle to know the API usage.
     * @param {UsageApiApiGetApiUsageByBillingCycleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiApiGenerated
     */
    public getApiUsageByBillingCycle(requestParameters: UsageApiApiGetApiUsageByBillingCycleRequest, options?: AxiosRequestConfig) {
        return UsageApiApiFp(this.configuration).getApiUsageByBillingCycle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An endpoint to obtain information on API usage for a specific day.
     * @summary Get API usage for a requested Date.
     * @param {UsageApiApiGetApiUsageByDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiApiGenerated
     */
    public getApiUsageByDate(requestParameters: UsageApiApiGetApiUsageByDateRequest, options?: AxiosRequestConfig) {
        return UsageApiApiFp(this.configuration).getApiUsageByDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An endpoint to obtain information on the previous 12 billing cycles.
     * @summary Get all the previous 12 billing cycles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiApiGenerated
     */
    public listPreviousBillingCycles(options?: AxiosRequestConfig) {
        return UsageApiApiFp(this.configuration).listPreviousBillingCycles(options).then((request) => request(this.axios, this.basePath));
    }
}
