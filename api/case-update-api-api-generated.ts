/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CaseUpdate } from '../models';
// @ts-ignore
import { CaseUpdateListResponse } from '../models';
// @ts-ignore
import { CaseUpdatePacerOptions } from '../models';
// @ts-ignore
import { CaseUpdateRequest } from '../models';
// @ts-ignore
import { Exception } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CaseUpdateApiApi - axios parameter creator
 * @export
 */
export const CaseUpdateApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Request case updates for the specified case.
         * @summary Add Case Update for the requested Case Id.
         * @param {CaseUpdateRequest} [caseUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCaseUpdateForCaseId: async (caseUpdateRequest?: CaseUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: caseUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseUpdate',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(caseUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve case updates for the specified date.
         * @summary Get Case Update  list for a requested Date.
         * @param {string} [caseId] The caseId value of the case for which updates should be retrieved.
         * @param {string} [requestedDate] The date for which case updates are to be retrieved.
         * @param {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'} [status] Status of the case updates to be retrieved.
         * @param {number} [pageNumber] The page number of the callbacks to be retrieved.&lt;br&gt;   - Minimum: 1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUpdates: async (caseId?: string, requestedDate?: string, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseUpdates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (caseId !== undefined) {
                localVarQueryParameter['caseId'] = caseId;
            }

            if (requestedDate !== undefined) {
                localVarQueryParameter['requestedDate'] = (requestedDate as any instanceof Date) ?
                    (requestedDate as any).toISOString() :
                    requestedDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseUpdates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve case updates for the specified case object.
         * @summary Get Case Updates for a requested CaseId.
         * @param {string} caseId The caseId value of the case object for which updates are to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUpdatesByCaseId: async (caseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getCaseUpdatesByCaseId', 'caseId', caseId)
            const localVarPath = `/caseUpdate/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseUpdate/{caseId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseUpdateApiApi - functional programming interface
 * @export
 */
export const CaseUpdateApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaseUpdateApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Request case updates for the specified case.
         * @summary Add Case Update for the requested Case Id.
         * @param {CaseUpdateApiApiAddCaseUpdateForCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCaseUpdateForCaseId(requestParameters: CaseUpdateApiApiAddCaseUpdateForCaseIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseUpdate>> {
            const caseUpdateRequest: CaseUpdateRequest = {
                caseId: requestParameters.caseId,
                pacerOptions: requestParameters.pacerOptions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCaseUpdateForCaseId(caseUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve case updates for the specified date.
         * @summary Get Case Update  list for a requested Date.
         * @param {CaseUpdateApiApiGetCaseUpdatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseUpdates(requestParameters: CaseUpdateApiApiGetCaseUpdatesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseUpdateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseUpdates(requestParameters.caseId, requestParameters.requestedDate, requestParameters.status, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve case updates for the specified case object.
         * @summary Get Case Updates for a requested CaseId.
         * @param {CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseUpdatesByCaseId(requestParameters: CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseUpdatesByCaseId(requestParameters.caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CaseUpdateApiApi - factory interface
 * @export
 */
export const CaseUpdateApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaseUpdateApiApiFp(configuration)
    return {
        /**
         * Request case updates for the specified case.
         * @summary Add Case Update for the requested Case Id.
         * @param {CaseUpdateApiApiAddCaseUpdateForCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCaseUpdateForCaseId(requestParameters: CaseUpdateApiApiAddCaseUpdateForCaseIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseUpdate> {
            return localVarFp.addCaseUpdateForCaseId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve case updates for the specified date.
         * @summary Get Case Update  list for a requested Date.
         * @param {CaseUpdateApiApiGetCaseUpdatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUpdates(requestParameters: CaseUpdateApiApiGetCaseUpdatesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseUpdateListResponse> {
            return localVarFp.getCaseUpdates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve case updates for the specified case object.
         * @summary Get Case Updates for a requested CaseId.
         * @param {CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUpdatesByCaseId(requestParameters: CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseUpdate> {
            return localVarFp.getCaseUpdatesByCaseId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCaseUpdateForCaseId operation in CaseUpdateApiApi.
 * @export
 * @interface CaseUpdateApiApiAddCaseUpdateForCaseIdRequest
 */
export type CaseUpdateApiApiAddCaseUpdateForCaseIdRequest = {
    
} & CaseUpdateRequest

/**
 * Request parameters for getCaseUpdates operation in CaseUpdateApiApi.
 * @export
 * @interface CaseUpdateApiApiGetCaseUpdatesRequest
 */
export type CaseUpdateApiApiGetCaseUpdatesRequest = {
    
    /**
    * The caseId value of the case for which updates should be retrieved.
    * @type {string}
    * @memberof CaseUpdateApiApiGetCaseUpdates
    */
    readonly caseId?: string
    
    /**
    * The date for which case updates are to be retrieved.
    * @type {string}
    * @memberof CaseUpdateApiApiGetCaseUpdates
    */
    readonly requestedDate?: string
    
    /**
    * Status of the case updates to be retrieved.
    * @type {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'}
    * @memberof CaseUpdateApiApiGetCaseUpdates
    */
    readonly status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'
    
    /**
    * The page number of the callbacks to be retrieved.<br>   - Minimum: 1 
    * @type {number}
    * @memberof CaseUpdateApiApiGetCaseUpdates
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getCaseUpdatesByCaseId operation in CaseUpdateApiApi.
 * @export
 * @interface CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest
 */
export type CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest = {
    
    /**
    * The caseId value of the case object for which updates are to be retrieved.
    * @type {string}
    * @memberof CaseUpdateApiApiGetCaseUpdatesByCaseId
    */
    readonly caseId: string
    
}

/**
 * CaseUpdateApiApiGenerated - object-oriented interface
 * @export
 * @class CaseUpdateApiApiGenerated
 * @extends {BaseAPI}
 */
export class CaseUpdateApiApiGenerated extends BaseAPI {
    /**
     * Request case updates for the specified case.
     * @summary Add Case Update for the requested Case Id.
     * @param {CaseUpdateApiApiAddCaseUpdateForCaseIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseUpdateApiApiGenerated
     */
    public addCaseUpdateForCaseId(requestParameters: CaseUpdateApiApiAddCaseUpdateForCaseIdRequest, options?: AxiosRequestConfig) {
        return CaseUpdateApiApiFp(this.configuration).addCaseUpdateForCaseId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve case updates for the specified date.
     * @summary Get Case Update  list for a requested Date.
     * @param {CaseUpdateApiApiGetCaseUpdatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseUpdateApiApiGenerated
     */
    public getCaseUpdates(requestParameters: CaseUpdateApiApiGetCaseUpdatesRequest = {}, options?: AxiosRequestConfig) {
        return CaseUpdateApiApiFp(this.configuration).getCaseUpdates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve case updates for the specified case object.
     * @summary Get Case Updates for a requested CaseId.
     * @param {CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseUpdateApiApiGenerated
     */
    public getCaseUpdatesByCaseId(requestParameters: CaseUpdateApiApiGetCaseUpdatesByCaseIdRequest, options?: AxiosRequestConfig) {
        return CaseUpdateApiApiFp(this.configuration).getCaseUpdatesByCaseId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
