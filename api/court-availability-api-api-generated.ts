/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CourtCoverage } from '../models';
// @ts-ignore
import { Exception } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CourtAvailabilityApiApi - axios parameter creator
 * @export
 */
export const CourtAvailabilityApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Determine whether the specified court is covered by UniCourt.
         * @summary Gets Court Coverage of all courts of specific type.
         * @param {string} courtId The courtId value of the target court.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageByCourtId: async (courtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            assertParamExists('getCourtCoverageByCourtId', 'courtId', courtId)
            const localVarPath = `/courtCoverage/{courtId}`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId !== undefined ? courtId : `-courtId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/courtCoverage/{courtId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourtAvailabilityApiApi - functional programming interface
 * @export
 */
export const CourtAvailabilityApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourtAvailabilityApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Determine whether the specified court is covered by UniCourt.
         * @summary Gets Court Coverage of all courts of specific type.
         * @param {CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtCoverageByCourtId(requestParameters: CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtCoverage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtCoverageByCourtId(requestParameters.courtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CourtAvailabilityApiApi - factory interface
 * @export
 */
export const CourtAvailabilityApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourtAvailabilityApiApiFp(configuration)
    return {
        /**
         * Determine whether the specified court is covered by UniCourt.
         * @summary Gets Court Coverage of all courts of specific type.
         * @param {CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageByCourtId(requestParameters: CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest, options?: AxiosRequestConfig): AxiosPromise<CourtCoverage> {
            return localVarFp.getCourtCoverageByCourtId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCourtCoverageByCourtId operation in CourtAvailabilityApiApi.
 * @export
 * @interface CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest
 */
export type CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest = {
    
    /**
    * The courtId value of the target court.
    * @type {string}
    * @memberof CourtAvailabilityApiApiGetCourtCoverageByCourtId
    */
    readonly courtId: string
    
}

/**
 * CourtAvailabilityApiApiGenerated - object-oriented interface
 * @export
 * @class CourtAvailabilityApiApiGenerated
 * @extends {BaseAPI}
 */
export class CourtAvailabilityApiApiGenerated extends BaseAPI {
    /**
     * Determine whether the specified court is covered by UniCourt.
     * @summary Gets Court Coverage of all courts of specific type.
     * @param {CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtAvailabilityApiApiGenerated
     */
    public getCourtCoverageByCourtId(requestParameters: CourtAvailabilityApiApiGetCourtCoverageByCourtIdRequest, options?: AxiosRequestConfig) {
        return CourtAvailabilityApiApiFp(this.configuration).getCourtCoverageByCourtId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
