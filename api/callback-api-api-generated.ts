/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallbackListResponse } from '../models';
// @ts-ignore
import { Exception } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CallbackApiApi - axios parameter creator
 * @export
 */
export const CallbackApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get list of callback types with count for a requested Date.
         * @summary Get list of callback types with count for a requested Date.
         * @param {string} [date] Date for which fetch the callback type list. By default, the date will be set to current date.
         * @param {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'} [status] Status of the callbacks. Default status will fetch all callbacks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCallbacksWithCount: async (date?: string, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/callbacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/callbacks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallbackApiApi - functional programming interface
 * @export
 */
export const CallbackApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallbackApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Get list of callback types with count for a requested Date.
         * @summary Get list of callback types with count for a requested Date.
         * @param {CallbackApiApiListCallbacksWithCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCallbacksWithCount(requestParameters: CallbackApiApiListCallbacksWithCountRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallbackListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCallbacksWithCount(requestParameters.date, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallbackApiApi - factory interface
 * @export
 */
export const CallbackApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallbackApiApiFp(configuration)
    return {
        /**
         * Get list of callback types with count for a requested Date.
         * @summary Get list of callback types with count for a requested Date.
         * @param {CallbackApiApiListCallbacksWithCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCallbacksWithCount(requestParameters: CallbackApiApiListCallbacksWithCountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CallbackListResponse> {
            return localVarFp.listCallbacksWithCount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listCallbacksWithCount operation in CallbackApiApi.
 * @export
 * @interface CallbackApiApiListCallbacksWithCountRequest
 */
export type CallbackApiApiListCallbacksWithCountRequest = {
    
    /**
    * Date for which fetch the callback type list. By default, the date will be set to current date.
    * @type {string}
    * @memberof CallbackApiApiListCallbacksWithCount
    */
    readonly date?: string
    
    /**
    * Status of the callbacks. Default status will fetch all callbacks.
    * @type {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'}
    * @memberof CallbackApiApiListCallbacksWithCount
    */
    readonly status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'
    
}

/**
 * CallbackApiApiGenerated - object-oriented interface
 * @export
 * @class CallbackApiApiGenerated
 * @extends {BaseAPI}
 */
export class CallbackApiApiGenerated extends BaseAPI {
    /**
     * Get list of callback types with count for a requested Date.
     * @summary Get list of callback types with count for a requested Date.
     * @param {CallbackApiApiListCallbacksWithCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbackApiApiGenerated
     */
    public listCallbacksWithCount(requestParameters: CallbackApiApiListCallbacksWithCountRequest = {}, options?: AxiosRequestConfig) {
        return CallbackApiApiFp(this.configuration).listCallbacksWithCount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
