/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attorney } from '../models';
// @ts-ignore
import { Attorneys } from '../models';
// @ts-ignore
import { Case } from '../models';
// @ts-ignore
import { DocketEntries } from '../models';
// @ts-ignore
import { DocketEntryPrimaryDocuments } from '../models';
// @ts-ignore
import { DocketEntrySecondaryDocuments } from '../models';
// @ts-ignore
import { Exception } from '../models';
// @ts-ignore
import { Hearings } from '../models';
// @ts-ignore
import { Judge } from '../models';
// @ts-ignore
import { Judges } from '../models';
// @ts-ignore
import { Parties } from '../models';
// @ts-ignore
import { Party } from '../models';
// @ts-ignore
import { PartyAttorneyAssociations } from '../models';
// @ts-ignore
import { RelatedCases } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CaseDocketApiApi - axios parameter creator
 * @export
 */
export const CaseDocketApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the attorneys in the case with the specified partyId value.
         * @summary Gets Associated Attorney details for a requested Party ID.
         * @param {string} partyId Retrieve the party with the specified partyId value.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociatedAttorneyDetails: async (partyId: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('getAssociatedAttorneyDetails', 'partyId', partyId)
            const localVarPath = `/party/{partyId}/associatedAttorneys`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId !== undefined ? partyId : `-partyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/party/{partyId}/associatedAttorneys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the parties represented by the attorney with the specified attorneyId value.
         * @summary Gets Associated Party details for a requested Attorney ID.
         * @param {string} attorneyId Retrieve the parties represented by the attorney with the specified attorneyId value.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociatedParties: async (attorneyId: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyId' is not null or undefined
            assertParamExists('getAssociatedParties', 'attorneyId', attorneyId)
            const localVarPath = `/attorney/{attorneyId}/associatedParties`
                .replace(`{${"attorneyId"}}`, encodeURIComponent(String(attorneyId !== undefined ? attorneyId : `-attorneyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attorney/{attorneyId}/associatedParties',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the attorney with the specified attorneyId value.
         * @summary Gets details for a requested Attorney ID.
         * @param {string} attorneyId Retrieve the attorney with the specified attorneyId value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyDetails: async (attorneyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyId' is not null or undefined
            assertParamExists('getAttorneyDetails', 'attorneyId', attorneyId)
            const localVarPath = `/attorney/{attorneyId}`
                .replace(`{${"attorneyId"}}`, encodeURIComponent(String(attorneyId !== undefined ? attorneyId : `-attorneyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attorney/{attorneyId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the attorneys in the case with the specified caseId value.
         * @summary Gets Attorneys for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {boolean} [isVisible] Retrieve attorneys in the case with the specified caseId value whose isVisible flag is set to the specified value.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneysByCaseId: async (caseId: string, isVisible?: boolean, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getAttorneysByCaseId', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/attorneys`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (isVisible !== undefined) {
                localVarQueryParameter['isVisible'] = isVisible;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/attorneys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the case with the specified caseId value.
         * @summary Gets case information for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseInfo: async (caseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getCaseInfo', 'caseId', caseId)
            const localVarPath = `/case/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the parties involved in the case with the specified caseId value.
         * @summary Gets Parties for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {boolean} [isVisible] Retrieve parties in the case with the specified caseId value whose isVisible flag is set to the specified value.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {string} [partyRoleId] Retrieve all parties with the specified partyRoleId value in the case with the specified caseId value.
         * @param {string} [partyRoleGroupId] Retrieve all parties with the specified partyRoleGroupId value in the case with the specified caseId value.
         * @param {string} [attorneyRepresentationTypeId] Retrieve all parties with the specified attorneyRepresentationTypeId value in the case with the specified caseId value.
         * @param {'INDIVIDUAL' | 'COMPANY' | 'OTHER'} [partyClassificationType] Retrieve all parties with the specified partyClassificationType value in the case with the specified caseId value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseParties: async (caseId: string, isVisible?: boolean, pageNumber?: number, partyRoleId?: string, partyRoleGroupId?: string, attorneyRepresentationTypeId?: string, partyClassificationType?: 'INDIVIDUAL' | 'COMPANY' | 'OTHER', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getCaseParties', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/parties`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (isVisible !== undefined) {
                localVarQueryParameter['isVisible'] = isVisible;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (partyRoleId !== undefined) {
                localVarQueryParameter['partyRoleId'] = partyRoleId;
            }

            if (partyRoleGroupId !== undefined) {
                localVarQueryParameter['partyRoleGroupId'] = partyRoleGroupId;
            }

            if (attorneyRepresentationTypeId !== undefined) {
                localVarQueryParameter['attorneyRepresentationTypeId'] = attorneyRepresentationTypeId;
            }

            if (partyClassificationType !== undefined) {
                localVarQueryParameter['partyClassificationType'] = partyClassificationType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/parties',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the docket entries in the case with the specified caseId value.
         * @summary Gets Docket Entries for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {number} [docketNumber] Retrieve the docket entry witih the specified docket number in the case with the specified caseId value.
         * @param {'latest to oldest' | 'oldest to latest'} [sortBy] Sort the retrieved docket entries in ascending order or descending order of date.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocketEntries: async (caseId: string, docketNumber?: number, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getDocketEntries', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/docketEntries`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (docketNumber !== undefined) {
                localVarQueryParameter['docketNumber'] = docketNumber;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/docketEntries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets Hearings for a requested Case ID.
         * @summary Gets Hearings for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {'latest to oldest' | 'oldest to latest'} [sortBy] Specify the sort order of hearings in the case with the specified caseId.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHearingsForCase: async (caseId: string, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getHearingsForCase', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/hearings`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/hearings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the judge with the specified judgeId value.
         * @summary Gets details for a requested Judge ID.
         * @param {string} judgeId Retrieve the judge with the specified judgeId value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgeDetails: async (judgeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'judgeId' is not null or undefined
            assertParamExists('getJudgeDetails', 'judgeId', judgeId)
            const localVarPath = `/judge/{judgeId}`
                .replace(`{${"judgeId"}}`, encodeURIComponent(String(judgeId !== undefined ? judgeId : `-judgeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/judge/{judgeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the judges involved in the specified case.
         * @summary Gets Judges for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {boolean} [isVisible] Retrieve attorneys judges in the case with the specified caseId value whose isVisible flag is set to the specified value.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgesForCase: async (caseId: string, isVisible?: boolean, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getJudgesForCase', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/judges`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (isVisible !== undefined) {
                localVarQueryParameter['isVisible'] = isVisible;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/judges',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the party with the specified partyId value.
         * @summary Gets details for a requested Party ID.
         * @param {string} partyId Retrieve the party with the specified partyId value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyDetails: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('getPartyDetails', 'partyId', partyId)
            const localVarPath = `/party/{partyId}`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId !== undefined ? partyId : `-partyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/party/{partyId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the primary documents in the case with the specified caseId value.
         * @summary Gets Primary Documents of Docket Entries.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {number} docketNumber Retrieve the primary documents associated with the specified docket number in the case with the specified caseId value.
         * @param {boolean} [inLibrary] Retrieve the primary documents in the with the specified inLibrary flag in the case with the specified caseId value.
         * @param {string} [afterFirstFetchDate] Retrieve all primary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
         * @param {string} [libraryDate] Retrieve all primary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimaryDocuments: async (caseId: string, docketNumber: number, inLibrary?: boolean, afterFirstFetchDate?: string, libraryDate?: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getPrimaryDocuments', 'caseId', caseId)
            // verify required parameter 'docketNumber' is not null or undefined
            assertParamExists('getPrimaryDocuments', 'docketNumber', docketNumber)
            const localVarPath = `/case/{caseId}/docketEntries/primaryDocuments`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (docketNumber !== undefined) {
                localVarQueryParameter['docketNumber'] = docketNumber;
            }

            if (inLibrary !== undefined) {
                localVarQueryParameter['inLibrary'] = inLibrary;
            }

            if (afterFirstFetchDate !== undefined) {
                localVarQueryParameter['afterFirstFetchDate'] = (afterFirstFetchDate as any instanceof Date) ?
                    (afterFirstFetchDate as any).toISOString() :
                    afterFirstFetchDate;
            }

            if (libraryDate !== undefined) {
                localVarQueryParameter['libraryDate'] = (libraryDate as any instanceof Date) ?
                    (libraryDate as any).toISOString() :
                    libraryDate;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/docketEntries/primaryDocuments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
         * @summary Gets Related Cases for a requested Case ID.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCases: async (caseId: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getRelatedCases', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/relatedCases`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/relatedCases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the secondary documents in the case with the specified caseId value.
         * @summary Gets Secondary Documents of Docket Entries.
         * @param {string} caseId Retrieve the case with the specified caseId value.
         * @param {number} docketNumber Retrieve the secondary documents associated with the specified docket number in the case with the specified caseId value.
         * @param {boolean} [inLibrary] Retrieve the secondary documents in the with the specified inLibrary flag in the case with the specified caseId value.
         * @param {string} [afterFirstFetchDate] Retrieve all secondary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
         * @param {string} [libraryDate] Retrieve all secondary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
         * @param {number} [pageNumber] Query parameter specifying the page number of the search results to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecondaryDocumentsForDocketEntries: async (caseId: string, docketNumber: number, inLibrary?: boolean, afterFirstFetchDate?: string, libraryDate?: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getSecondaryDocumentsForDocketEntries', 'caseId', caseId)
            // verify required parameter 'docketNumber' is not null or undefined
            assertParamExists('getSecondaryDocumentsForDocketEntries', 'docketNumber', docketNumber)
            const localVarPath = `/case/{caseId}/docketEntries/secondaryDocuments`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (docketNumber !== undefined) {
                localVarQueryParameter['docketNumber'] = docketNumber;
            }

            if (inLibrary !== undefined) {
                localVarQueryParameter['inLibrary'] = inLibrary;
            }

            if (afterFirstFetchDate !== undefined) {
                localVarQueryParameter['afterFirstFetchDate'] = (afterFirstFetchDate as any instanceof Date) ?
                    (afterFirstFetchDate as any).toISOString() :
                    afterFirstFetchDate;
            }

            if (libraryDate !== undefined) {
                localVarQueryParameter['libraryDate'] = (libraryDate as any instanceof Date) ?
                    (libraryDate as any).toISOString() :
                    libraryDate;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/docketEntries/secondaryDocuments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseDocketApiApi - functional programming interface
 * @export
 */
export const CaseDocketApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaseDocketApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the attorneys in the case with the specified partyId value.
         * @summary Gets Associated Attorney details for a requested Party ID.
         * @param {CaseDocketApiApiGetAssociatedAttorneyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociatedAttorneyDetails(requestParameters: CaseDocketApiApiGetAssociatedAttorneyDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyAttorneyAssociations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociatedAttorneyDetails(requestParameters.partyId, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the parties represented by the attorney with the specified attorneyId value.
         * @summary Gets Associated Party details for a requested Attorney ID.
         * @param {CaseDocketApiApiGetAssociatedPartiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssociatedParties(requestParameters: CaseDocketApiApiGetAssociatedPartiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyAttorneyAssociations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssociatedParties(requestParameters.attorneyId, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the attorney with the specified attorneyId value.
         * @summary Gets details for a requested Attorney ID.
         * @param {CaseDocketApiApiGetAttorneyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttorneyDetails(requestParameters: CaseDocketApiApiGetAttorneyDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attorney>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttorneyDetails(requestParameters.attorneyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the attorneys in the case with the specified caseId value.
         * @summary Gets Attorneys for a requested Case ID.
         * @param {CaseDocketApiApiGetAttorneysByCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttorneysByCaseId(requestParameters: CaseDocketApiApiGetAttorneysByCaseIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attorneys>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttorneysByCaseId(requestParameters.caseId, requestParameters.isVisible, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the case with the specified caseId value.
         * @summary Gets case information for a requested Case ID.
         * @param {CaseDocketApiApiGetCaseInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseInfo(requestParameters: CaseDocketApiApiGetCaseInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseInfo(requestParameters.caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the parties involved in the case with the specified caseId value.
         * @summary Gets Parties for a requested Case ID.
         * @param {CaseDocketApiApiGetCasePartiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseParties(requestParameters: CaseDocketApiApiGetCasePartiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Parties>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseParties(requestParameters.caseId, requestParameters.isVisible, requestParameters.pageNumber, requestParameters.partyRoleId, requestParameters.partyRoleGroupId, requestParameters.attorneyRepresentationTypeId, requestParameters.partyClassificationType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the docket entries in the case with the specified caseId value.
         * @summary Gets Docket Entries for a requested Case ID.
         * @param {CaseDocketApiApiGetDocketEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocketEntries(requestParameters: CaseDocketApiApiGetDocketEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocketEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocketEntries(requestParameters.caseId, requestParameters.docketNumber, requestParameters.sortBy, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets Hearings for a requested Case ID.
         * @summary Gets Hearings for a requested Case ID.
         * @param {CaseDocketApiApiGetHearingsForCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHearingsForCase(requestParameters: CaseDocketApiApiGetHearingsForCaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hearings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHearingsForCase(requestParameters.caseId, requestParameters.sortBy, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the judge with the specified judgeId value.
         * @summary Gets details for a requested Judge ID.
         * @param {CaseDocketApiApiGetJudgeDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJudgeDetails(requestParameters: CaseDocketApiApiGetJudgeDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Judge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJudgeDetails(requestParameters.judgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the judges involved in the specified case.
         * @summary Gets Judges for a requested Case ID.
         * @param {CaseDocketApiApiGetJudgesForCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJudgesForCase(requestParameters: CaseDocketApiApiGetJudgesForCaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Judges>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJudgesForCase(requestParameters.caseId, requestParameters.isVisible, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the party with the specified partyId value.
         * @summary Gets details for a requested Party ID.
         * @param {CaseDocketApiApiGetPartyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyDetails(requestParameters: CaseDocketApiApiGetPartyDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Party>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyDetails(requestParameters.partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the primary documents in the case with the specified caseId value.
         * @summary Gets Primary Documents of Docket Entries.
         * @param {CaseDocketApiApiGetPrimaryDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrimaryDocuments(requestParameters: CaseDocketApiApiGetPrimaryDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocketEntryPrimaryDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrimaryDocuments(requestParameters.caseId, requestParameters.docketNumber, requestParameters.inLibrary, requestParameters.afterFirstFetchDate, requestParameters.libraryDate, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
         * @summary Gets Related Cases for a requested Case ID.
         * @param {CaseDocketApiApiGetRelatedCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedCases(requestParameters: CaseDocketApiApiGetRelatedCasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelatedCases>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedCases(requestParameters.caseId, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the secondary documents in the case with the specified caseId value.
         * @summary Gets Secondary Documents of Docket Entries.
         * @param {CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecondaryDocumentsForDocketEntries(requestParameters: CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocketEntrySecondaryDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecondaryDocumentsForDocketEntries(requestParameters.caseId, requestParameters.docketNumber, requestParameters.inLibrary, requestParameters.afterFirstFetchDate, requestParameters.libraryDate, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CaseDocketApiApi - factory interface
 * @export
 */
export const CaseDocketApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaseDocketApiApiFp(configuration)
    return {
        /**
         * Retrieve the attorneys in the case with the specified partyId value.
         * @summary Gets Associated Attorney details for a requested Party ID.
         * @param {CaseDocketApiApiGetAssociatedAttorneyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociatedAttorneyDetails(requestParameters: CaseDocketApiApiGetAssociatedAttorneyDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PartyAttorneyAssociations> {
            return localVarFp.getAssociatedAttorneyDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the parties represented by the attorney with the specified attorneyId value.
         * @summary Gets Associated Party details for a requested Attorney ID.
         * @param {CaseDocketApiApiGetAssociatedPartiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociatedParties(requestParameters: CaseDocketApiApiGetAssociatedPartiesRequest, options?: AxiosRequestConfig): AxiosPromise<PartyAttorneyAssociations> {
            return localVarFp.getAssociatedParties(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the attorney with the specified attorneyId value.
         * @summary Gets details for a requested Attorney ID.
         * @param {CaseDocketApiApiGetAttorneyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyDetails(requestParameters: CaseDocketApiApiGetAttorneyDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Attorney> {
            return localVarFp.getAttorneyDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the attorneys in the case with the specified caseId value.
         * @summary Gets Attorneys for a requested Case ID.
         * @param {CaseDocketApiApiGetAttorneysByCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneysByCaseId(requestParameters: CaseDocketApiApiGetAttorneysByCaseIdRequest, options?: AxiosRequestConfig): AxiosPromise<Attorneys> {
            return localVarFp.getAttorneysByCaseId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the case with the specified caseId value.
         * @summary Gets case information for a requested Case ID.
         * @param {CaseDocketApiApiGetCaseInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseInfo(requestParameters: CaseDocketApiApiGetCaseInfoRequest, options?: AxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.getCaseInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the parties involved in the case with the specified caseId value.
         * @summary Gets Parties for a requested Case ID.
         * @param {CaseDocketApiApiGetCasePartiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseParties(requestParameters: CaseDocketApiApiGetCasePartiesRequest, options?: AxiosRequestConfig): AxiosPromise<Parties> {
            return localVarFp.getCaseParties(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the docket entries in the case with the specified caseId value.
         * @summary Gets Docket Entries for a requested Case ID.
         * @param {CaseDocketApiApiGetDocketEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocketEntries(requestParameters: CaseDocketApiApiGetDocketEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<DocketEntries> {
            return localVarFp.getDocketEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets Hearings for a requested Case ID.
         * @summary Gets Hearings for a requested Case ID.
         * @param {CaseDocketApiApiGetHearingsForCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHearingsForCase(requestParameters: CaseDocketApiApiGetHearingsForCaseRequest, options?: AxiosRequestConfig): AxiosPromise<Hearings> {
            return localVarFp.getHearingsForCase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the judge with the specified judgeId value.
         * @summary Gets details for a requested Judge ID.
         * @param {CaseDocketApiApiGetJudgeDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgeDetails(requestParameters: CaseDocketApiApiGetJudgeDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Judge> {
            return localVarFp.getJudgeDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the judges involved in the specified case.
         * @summary Gets Judges for a requested Case ID.
         * @param {CaseDocketApiApiGetJudgesForCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgesForCase(requestParameters: CaseDocketApiApiGetJudgesForCaseRequest, options?: AxiosRequestConfig): AxiosPromise<Judges> {
            return localVarFp.getJudgesForCase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the party with the specified partyId value.
         * @summary Gets details for a requested Party ID.
         * @param {CaseDocketApiApiGetPartyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyDetails(requestParameters: CaseDocketApiApiGetPartyDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Party> {
            return localVarFp.getPartyDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the primary documents in the case with the specified caseId value.
         * @summary Gets Primary Documents of Docket Entries.
         * @param {CaseDocketApiApiGetPrimaryDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimaryDocuments(requestParameters: CaseDocketApiApiGetPrimaryDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<DocketEntryPrimaryDocuments> {
            return localVarFp.getPrimaryDocuments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
         * @summary Gets Related Cases for a requested Case ID.
         * @param {CaseDocketApiApiGetRelatedCasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCases(requestParameters: CaseDocketApiApiGetRelatedCasesRequest, options?: AxiosRequestConfig): AxiosPromise<RelatedCases> {
            return localVarFp.getRelatedCases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the secondary documents in the case with the specified caseId value.
         * @summary Gets Secondary Documents of Docket Entries.
         * @param {CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecondaryDocumentsForDocketEntries(requestParameters: CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<DocketEntrySecondaryDocuments> {
            return localVarFp.getSecondaryDocumentsForDocketEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAssociatedAttorneyDetails operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetAssociatedAttorneyDetailsRequest
 */
export type CaseDocketApiApiGetAssociatedAttorneyDetailsRequest = {
    
    /**
    * Retrieve the party with the specified partyId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetAssociatedAttorneyDetails
    */
    readonly partyId: string
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetAssociatedAttorneyDetails
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getAssociatedParties operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetAssociatedPartiesRequest
 */
export type CaseDocketApiApiGetAssociatedPartiesRequest = {
    
    /**
    * Retrieve the parties represented by the attorney with the specified attorneyId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetAssociatedParties
    */
    readonly attorneyId: string
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetAssociatedParties
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getAttorneyDetails operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetAttorneyDetailsRequest
 */
export type CaseDocketApiApiGetAttorneyDetailsRequest = {
    
    /**
    * Retrieve the attorney with the specified attorneyId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetAttorneyDetails
    */
    readonly attorneyId: string
    
}

/**
 * Request parameters for getAttorneysByCaseId operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetAttorneysByCaseIdRequest
 */
export type CaseDocketApiApiGetAttorneysByCaseIdRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetAttorneysByCaseId
    */
    readonly caseId: string
    
    /**
    * Retrieve attorneys in the case with the specified caseId value whose isVisible flag is set to the specified value.
    * @type {boolean}
    * @memberof CaseDocketApiApiGetAttorneysByCaseId
    */
    readonly isVisible?: boolean
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetAttorneysByCaseId
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getCaseInfo operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetCaseInfoRequest
 */
export type CaseDocketApiApiGetCaseInfoRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetCaseInfo
    */
    readonly caseId: string
    
}

/**
 * Request parameters for getCaseParties operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetCasePartiesRequest
 */
export type CaseDocketApiApiGetCasePartiesRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly caseId: string
    
    /**
    * Retrieve parties in the case with the specified caseId value whose isVisible flag is set to the specified value.
    * @type {boolean}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly isVisible?: boolean
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly pageNumber?: number
    
    /**
    * Retrieve all parties with the specified partyRoleId value in the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly partyRoleId?: string
    
    /**
    * Retrieve all parties with the specified partyRoleGroupId value in the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly partyRoleGroupId?: string
    
    /**
    * Retrieve all parties with the specified attorneyRepresentationTypeId value in the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly attorneyRepresentationTypeId?: string
    
    /**
    * Retrieve all parties with the specified partyClassificationType value in the case with the specified caseId value.
    * @type {'INDIVIDUAL' | 'COMPANY' | 'OTHER'}
    * @memberof CaseDocketApiApiGetCaseParties
    */
    readonly partyClassificationType?: 'INDIVIDUAL' | 'COMPANY' | 'OTHER'
    
}

/**
 * Request parameters for getDocketEntries operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetDocketEntriesRequest
 */
export type CaseDocketApiApiGetDocketEntriesRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetDocketEntries
    */
    readonly caseId: string
    
    /**
    * Retrieve the docket entry witih the specified docket number in the case with the specified caseId value.
    * @type {number}
    * @memberof CaseDocketApiApiGetDocketEntries
    */
    readonly docketNumber?: number
    
    /**
    * Sort the retrieved docket entries in ascending order or descending order of date.
    * @type {'latest to oldest' | 'oldest to latest'}
    * @memberof CaseDocketApiApiGetDocketEntries
    */
    readonly sortBy?: 'latest to oldest' | 'oldest to latest'
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetDocketEntries
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getHearingsForCase operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetHearingsForCaseRequest
 */
export type CaseDocketApiApiGetHearingsForCaseRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetHearingsForCase
    */
    readonly caseId: string
    
    /**
    * Specify the sort order of hearings in the case with the specified caseId.
    * @type {'latest to oldest' | 'oldest to latest'}
    * @memberof CaseDocketApiApiGetHearingsForCase
    */
    readonly sortBy?: 'latest to oldest' | 'oldest to latest'
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetHearingsForCase
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getJudgeDetails operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetJudgeDetailsRequest
 */
export type CaseDocketApiApiGetJudgeDetailsRequest = {
    
    /**
    * Retrieve the judge with the specified judgeId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetJudgeDetails
    */
    readonly judgeId: string
    
}

/**
 * Request parameters for getJudgesForCase operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetJudgesForCaseRequest
 */
export type CaseDocketApiApiGetJudgesForCaseRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetJudgesForCase
    */
    readonly caseId: string
    
    /**
    * Retrieve attorneys judges in the case with the specified caseId value whose isVisible flag is set to the specified value.
    * @type {boolean}
    * @memberof CaseDocketApiApiGetJudgesForCase
    */
    readonly isVisible?: boolean
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetJudgesForCase
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getPartyDetails operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetPartyDetailsRequest
 */
export type CaseDocketApiApiGetPartyDetailsRequest = {
    
    /**
    * Retrieve the party with the specified partyId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetPartyDetails
    */
    readonly partyId: string
    
}

/**
 * Request parameters for getPrimaryDocuments operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetPrimaryDocumentsRequest
 */
export type CaseDocketApiApiGetPrimaryDocumentsRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetPrimaryDocuments
    */
    readonly caseId: string
    
    /**
    * Retrieve the primary documents associated with the specified docket number in the case with the specified caseId value.
    * @type {number}
    * @memberof CaseDocketApiApiGetPrimaryDocuments
    */
    readonly docketNumber: number
    
    /**
    * Retrieve the primary documents in the with the specified inLibrary flag in the case with the specified caseId value.
    * @type {boolean}
    * @memberof CaseDocketApiApiGetPrimaryDocuments
    */
    readonly inLibrary?: boolean
    
    /**
    * Retrieve all primary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
    * @type {string}
    * @memberof CaseDocketApiApiGetPrimaryDocuments
    */
    readonly afterFirstFetchDate?: string
    
    /**
    * Retrieve all primary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
    * @type {string}
    * @memberof CaseDocketApiApiGetPrimaryDocuments
    */
    readonly libraryDate?: string
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetPrimaryDocuments
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getRelatedCases operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetRelatedCasesRequest
 */
export type CaseDocketApiApiGetRelatedCasesRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetRelatedCases
    */
    readonly caseId: string
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetRelatedCases
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getSecondaryDocumentsForDocketEntries operation in CaseDocketApiApi.
 * @export
 * @interface CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest
 */
export type CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest = {
    
    /**
    * Retrieve the case with the specified caseId value.
    * @type {string}
    * @memberof CaseDocketApiApiGetSecondaryDocumentsForDocketEntries
    */
    readonly caseId: string
    
    /**
    * Retrieve the secondary documents associated with the specified docket number in the case with the specified caseId value.
    * @type {number}
    * @memberof CaseDocketApiApiGetSecondaryDocumentsForDocketEntries
    */
    readonly docketNumber: number
    
    /**
    * Retrieve the secondary documents in the with the specified inLibrary flag in the case with the specified caseId value.
    * @type {boolean}
    * @memberof CaseDocketApiApiGetSecondaryDocumentsForDocketEntries
    */
    readonly inLibrary?: boolean
    
    /**
    * Retrieve all secondary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
    * @type {string}
    * @memberof CaseDocketApiApiGetSecondaryDocumentsForDocketEntries
    */
    readonly afterFirstFetchDate?: string
    
    /**
    * Retrieve all secondary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
    * @type {string}
    * @memberof CaseDocketApiApiGetSecondaryDocumentsForDocketEntries
    */
    readonly libraryDate?: string
    
    /**
    * Query parameter specifying the page number of the search results to be retrieved.
    * @type {number}
    * @memberof CaseDocketApiApiGetSecondaryDocumentsForDocketEntries
    */
    readonly pageNumber?: number
    
}

/**
 * CaseDocketApiApiGenerated - object-oriented interface
 * @export
 * @class CaseDocketApiApiGenerated
 * @extends {BaseAPI}
 */
export class CaseDocketApiApiGenerated extends BaseAPI {
    /**
     * Retrieve the attorneys in the case with the specified partyId value.
     * @summary Gets Associated Attorney details for a requested Party ID.
     * @param {CaseDocketApiApiGetAssociatedAttorneyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getAssociatedAttorneyDetails(requestParameters: CaseDocketApiApiGetAssociatedAttorneyDetailsRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getAssociatedAttorneyDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the parties represented by the attorney with the specified attorneyId value.
     * @summary Gets Associated Party details for a requested Attorney ID.
     * @param {CaseDocketApiApiGetAssociatedPartiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getAssociatedParties(requestParameters: CaseDocketApiApiGetAssociatedPartiesRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getAssociatedParties(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the attorney with the specified attorneyId value.
     * @summary Gets details for a requested Attorney ID.
     * @param {CaseDocketApiApiGetAttorneyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getAttorneyDetails(requestParameters: CaseDocketApiApiGetAttorneyDetailsRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getAttorneyDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the attorneys in the case with the specified caseId value.
     * @summary Gets Attorneys for a requested Case ID.
     * @param {CaseDocketApiApiGetAttorneysByCaseIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getAttorneysByCaseId(requestParameters: CaseDocketApiApiGetAttorneysByCaseIdRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getAttorneysByCaseId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the case with the specified caseId value.
     * @summary Gets case information for a requested Case ID.
     * @param {CaseDocketApiApiGetCaseInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getCaseInfo(requestParameters: CaseDocketApiApiGetCaseInfoRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getCaseInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the parties involved in the case with the specified caseId value.
     * @summary Gets Parties for a requested Case ID.
     * @param {CaseDocketApiApiGetCasePartiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getCaseParties(requestParameters: CaseDocketApiApiGetCasePartiesRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getCaseParties(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the docket entries in the case with the specified caseId value.
     * @summary Gets Docket Entries for a requested Case ID.
     * @param {CaseDocketApiApiGetDocketEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getDocketEntries(requestParameters: CaseDocketApiApiGetDocketEntriesRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getDocketEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets Hearings for a requested Case ID.
     * @summary Gets Hearings for a requested Case ID.
     * @param {CaseDocketApiApiGetHearingsForCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getHearingsForCase(requestParameters: CaseDocketApiApiGetHearingsForCaseRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getHearingsForCase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the judge with the specified judgeId value.
     * @summary Gets details for a requested Judge ID.
     * @param {CaseDocketApiApiGetJudgeDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getJudgeDetails(requestParameters: CaseDocketApiApiGetJudgeDetailsRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getJudgeDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the judges involved in the specified case.
     * @summary Gets Judges for a requested Case ID.
     * @param {CaseDocketApiApiGetJudgesForCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getJudgesForCase(requestParameters: CaseDocketApiApiGetJudgesForCaseRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getJudgesForCase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the party with the specified partyId value.
     * @summary Gets details for a requested Party ID.
     * @param {CaseDocketApiApiGetPartyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getPartyDetails(requestParameters: CaseDocketApiApiGetPartyDetailsRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getPartyDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the primary documents in the case with the specified caseId value.
     * @summary Gets Primary Documents of Docket Entries.
     * @param {CaseDocketApiApiGetPrimaryDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getPrimaryDocuments(requestParameters: CaseDocketApiApiGetPrimaryDocumentsRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getPrimaryDocuments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
     * @summary Gets Related Cases for a requested Case ID.
     * @param {CaseDocketApiApiGetRelatedCasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getRelatedCases(requestParameters: CaseDocketApiApiGetRelatedCasesRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getRelatedCases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the secondary documents in the case with the specified caseId value.
     * @summary Gets Secondary Documents of Docket Entries.
     * @param {CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocketApiApiGenerated
     */
    public getSecondaryDocumentsForDocketEntries(requestParameters: CaseDocketApiApiGetSecondaryDocumentsForDocketEntriesRequest, options?: AxiosRequestConfig) {
        return CaseDocketApiApiFp(this.configuration).getSecondaryDocumentsForDocketEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
