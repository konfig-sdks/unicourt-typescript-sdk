/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AreaOfLaw } from '../models';
// @ts-ignore
import { AreaOfLawResponse } from '../models';
// @ts-ignore
import { AttorneyRepresentationType } from '../models';
// @ts-ignore
import { AttorneyRepresentationTypeResponse } from '../models';
// @ts-ignore
import { AttorneyType } from '../models';
// @ts-ignore
import { AttorneyTypeResponse } from '../models';
// @ts-ignore
import { CaseClass } from '../models';
// @ts-ignore
import { CaseClassResponse } from '../models';
// @ts-ignore
import { CaseRelationshipType } from '../models';
// @ts-ignore
import { CaseRelationshipTypeResponse } from '../models';
// @ts-ignore
import { CaseStatus } from '../models';
// @ts-ignore
import { CaseStatusGroup } from '../models';
// @ts-ignore
import { CaseStatusGroupResponse } from '../models';
// @ts-ignore
import { CaseStatusResponse } from '../models';
// @ts-ignore
import { CaseType } from '../models';
// @ts-ignore
import { CaseTypeGroup } from '../models';
// @ts-ignore
import { CaseTypeGroupResponse } from '../models';
// @ts-ignore
import { CaseTypeResponse } from '../models';
// @ts-ignore
import { CauseOfAction } from '../models';
// @ts-ignore
import { CauseOfActionAdditionalData } from '../models';
// @ts-ignore
import { CauseOfActionAdditionalDataResponse } from '../models';
// @ts-ignore
import { CauseOfActionGroup } from '../models';
// @ts-ignore
import { CauseOfActionGroupResponse } from '../models';
// @ts-ignore
import { CauseOfActionResponse } from '../models';
// @ts-ignore
import { Charge } from '../models';
// @ts-ignore
import { ChargeAdditionalData } from '../models';
// @ts-ignore
import { ChargeAdditionalDataResponse } from '../models';
// @ts-ignore
import { ChargeDegree } from '../models';
// @ts-ignore
import { ChargeDegreeResponse } from '../models';
// @ts-ignore
import { ChargeGroup } from '../models';
// @ts-ignore
import { ChargeGroupResponse } from '../models';
// @ts-ignore
import { ChargeResponse } from '../models';
// @ts-ignore
import { ChargeSeverity } from '../models';
// @ts-ignore
import { ChargeSeverityResponse } from '../models';
// @ts-ignore
import { Court } from '../models';
// @ts-ignore
import { CourtLocation } from '../models';
// @ts-ignore
import { CourtLocationResponse } from '../models';
// @ts-ignore
import { CourtResponse } from '../models';
// @ts-ignore
import { CourtServiceStatus } from '../models';
// @ts-ignore
import { CourtServiceStatusResponse } from '../models';
// @ts-ignore
import { CourtSystem } from '../models';
// @ts-ignore
import { CourtSystemResponse } from '../models';
// @ts-ignore
import { CourtType } from '../models';
// @ts-ignore
import { CourtTypeResponse } from '../models';
// @ts-ignore
import { Exception } from '../models';
// @ts-ignore
import { JudgeType } from '../models';
// @ts-ignore
import { JudgeTypeResponse } from '../models';
// @ts-ignore
import { JurisdictionGeo } from '../models';
// @ts-ignore
import { JurisdictionGeoResponse } from '../models';
// @ts-ignore
import { PartyRole } from '../models';
// @ts-ignore
import { PartyRoleGroup } from '../models';
// @ts-ignore
import { PartyRoleGroupResponse } from '../models';
// @ts-ignore
import { PartyRoleResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CourtStandardsApiApi - axios parameter creator
 * @export
 */
export const CourtStandardsApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns Associated Court for given Jurisdiction Geo. 
         * @summary Associated Court for given Jurisdiction Geo.
         * @param {string} jurisdictionGeoId jurisdictionGeoId
         * @param {number} [pageNumber] Page number. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] Sort field.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associatedCourtForJurisdictionGeo: async (jurisdictionGeoId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jurisdictionGeoId' is not null or undefined
            assertParamExists('associatedCourtForJurisdictionGeo', 'jurisdictionGeoId', jurisdictionGeoId)
            const localVarPath = `/masterData/jurisdictionGeo/{jurisdictionGeoId}/courts`
                .replace(`{${"jurisdictionGeoId"}}`, encodeURIComponent(String(jurisdictionGeoId !== undefined ? jurisdictionGeoId : `-jurisdictionGeoId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/jurisdictionGeo/{jurisdictionGeoId}/courts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject 
         * @summary Charge Additional Data Object.
         * @param {string} [q] The keyword expression targeting the desired charge additional data.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalChargeInfo: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/chargeAdditionalData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeAdditionalData',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the appeals courts associated with the specified court. 
         * @summary Appeal Court Objects for given courtId.
         * @param {string} courtId The courtId value of the target court.
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppealCourtsForCourt: async (courtId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            assertParamExists('getAppealCourtsForCourt', 'courtId', courtId)
            const localVarPath = `/masterData/court/{courtId}/appealCourts`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId !== undefined ? courtId : `-courtId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/court/{courtId}/appealCourts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified area of law. 
         * @summary AreaOfLaw Object for the given AreaOfLaw Id.
         * @param {string} areaOfLawId The areaOfLawId value of the desired area of law.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAreaOfLaw: async (areaOfLawId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaOfLawId' is not null or undefined
            assertParamExists('getAreaOfLaw', 'areaOfLawId', areaOfLawId)
            const localVarPath = `/masterData/areaOfLaw/{areaOfLawId}`
                .replace(`{${"areaOfLawId"}}`, encodeURIComponent(String(areaOfLawId !== undefined ? areaOfLawId : `-areaOfLawId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/areaOfLaw/{areaOfLawId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above. ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject 
         * @summary Attorney Representation Type Object.
         * @param {string} [q] The keyword expression targeting the attorney representation type.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyRepType: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/attorneyRepresentationType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/attorneyRepresentationType',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified attorney representation type. 
         * @summary Attorney Representation Type Object for the given attorneyRepresentationTypeId.
         * @param {string} attorneyRepresentationTypeId The attorneyRepresentationTypeId value of the desired attorney representation type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyRepType_1: async (attorneyRepresentationTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyRepresentationTypeId' is not null or undefined
            assertParamExists('getAttorneyRepType_1', 'attorneyRepresentationTypeId', attorneyRepresentationTypeId)
            const localVarPath = `/masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}`
                .replace(`{${"attorneyRepresentationTypeId"}}`, encodeURIComponent(String(attorneyRepresentationTypeId !== undefined ? attorneyRepresentationTypeId : `-attorneyRepresentationTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specified attorney type object. 
         * @summary Attorney Type Object for given Attorney Type Id.
         * @param {string} attorneyTypeId The attorneyTypeId value of the desired attorney type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyTypeObject: async (attorneyTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyTypeId' is not null or undefined
            assertParamExists('getAttorneyTypeObject', 'attorneyTypeId', attorneyTypeId)
            const localVarPath = `/masterData/attorneyType/{attorneyTypeId}`
                .replace(`{${"attorneyTypeId"}}`, encodeURIComponent(String(attorneyTypeId !== undefined ? attorneyTypeId : `-attorneyTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/attorneyType/{attorneyTypeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject 
         * @summary Attorney Type Object.
         * @param {string} [q] The keyword expression targeting the attorney type.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyTypeUsingKeywordExpression: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/attorneyType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/attorneyType',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified case class. 
         * @summary Case Class Object for the given Case Class Id.
         * @param {string} caseClassId The caseClassId value of the desired case class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClassById: async (caseClassId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseClassId' is not null or undefined
            assertParamExists('getCaseClassById', 'caseClassId', caseClassId)
            const localVarPath = `/masterData/caseClass/{caseClassId}`
                .replace(`{${"caseClassId"}}`, encodeURIComponent(String(caseClassId !== undefined ? caseClassId : `-caseClassId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseClass/{caseClassId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject 
         * @summary Case Class Object.
         * @param {string} [q] The keyword expression targeting the desired case class.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClassByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/caseClass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseClass',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified case relationship type. 
         * @summary Case Relationship Type Object for the given caseRelationshipTypeId.
         * @param {string} caseRelationshipTypeId The caseRelationshipTypeId value of the desired case relationship type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseRelationshipTypeById: async (caseRelationshipTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseRelationshipTypeId' is not null or undefined
            assertParamExists('getCaseRelationshipTypeById', 'caseRelationshipTypeId', caseRelationshipTypeId)
            const localVarPath = `/masterData/caseRelationshipType/{caseRelationshipTypeId}`
                .replace(`{${"caseRelationshipTypeId"}}`, encodeURIComponent(String(caseRelationshipTypeId !== undefined ? caseRelationshipTypeId : `-caseRelationshipTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseRelationshipType/{caseRelationshipTypeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject 
         * @summary Case Relationship Type Object.
         * @param {string} [q] The keyword expression targeting the case relationship type.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseRelationshipTypes: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/caseRelationshipType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseRelationshipType',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified case status. 
         * @summary Returns the caseStatus information for the given caseStatusId.
         * @param {string} caseStatusId The caseStatusId value of the desired case status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusById: async (caseStatusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseStatusId' is not null or undefined
            assertParamExists('getCaseStatusById', 'caseStatusId', caseStatusId)
            const localVarPath = `/masterData/caseStatus/{caseStatusId}`
                .replace(`{${"caseStatusId"}}`, encodeURIComponent(String(caseStatusId !== undefined ? caseStatusId : `-caseStatusId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseStatus/{caseStatusId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject 
         * @summary Case Status Object.
         * @param {string} [q] The keyword expression targeting the desired case status.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/caseStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseStatus',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified case status group. 
         * @summary Returns the caseStatusGroup information for the given caseStatusGroupId.
         * @param {string} caseStatusGroupId The caseStatusGroupId value of the desired case status group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusGroup: async (caseStatusGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseStatusGroupId' is not null or undefined
            assertParamExists('getCaseStatusGroup', 'caseStatusGroupId', caseStatusGroupId)
            const localVarPath = `/masterData/caseStatusGroup/{caseStatusGroupId}`
                .replace(`{${"caseStatusGroupId"}}`, encodeURIComponent(String(caseStatusGroupId !== undefined ? caseStatusGroupId : `-caseStatusGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseStatusGroup/{caseStatusGroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject 
         * @summary Case Status Group Object.
         * @param {string} [q] The keyword expression targeting the desired case status group.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusGroupUsingKeywordExpression: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/caseStatusGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseStatusGroup',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified case type. 
         * @summary CaseType Object for given Case Type Id.
         * @param {string} caseTypeId The caseTypeId value of the desired case type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseType: async (caseTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseTypeId' is not null or undefined
            assertParamExists('getCaseType', 'caseTypeId', caseTypeId)
            const localVarPath = `/masterData/caseType/{caseTypeId}`
                .replace(`{${"caseTypeId"}}`, encodeURIComponent(String(caseTypeId !== undefined ? caseTypeId : `-caseTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseType/{caseTypeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified case type group. 
         * @summary CaseType Group for the given CaseType Group Id.
         * @param {string} caseTypeGroupId caseTypeGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTypeGroup: async (caseTypeGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseTypeGroupId' is not null or undefined
            assertParamExists('getCaseTypeGroup', 'caseTypeGroupId', caseTypeGroupId)
            const localVarPath = `/masterData/caseTypeGroup/{caseTypeGroupId}`
                .replace(`{${"caseTypeGroupId"}}`, encodeURIComponent(String(caseTypeGroupId !== undefined ? caseTypeGroupId : `-caseTypeGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseTypeGroup/{caseTypeGroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject 
         * @summary Case Type Object.
         * @param {string} [q] Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTypesByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/caseType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseType',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified cause of action. 
         * @summary CauseOfAction Object for the given causeOfActionId.
         * @param {string} causeOfActionId The causeOfActionId value of the desired cause of action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfAction: async (causeOfActionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'causeOfActionId' is not null or undefined
            assertParamExists('getCauseOfAction', 'causeOfActionId', causeOfActionId)
            const localVarPath = `/masterData/causeOfAction/{causeOfActionId}`
                .replace(`{${"causeOfActionId"}}`, encodeURIComponent(String(causeOfActionId !== undefined ? causeOfActionId : `-causeOfActionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/causeOfAction/{causeOfActionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject 
         * @summary CauseOfActionAdditionaData Object.
         * @param {string} [q] The keyword expression targeting the desired cause of action additional data.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionAdditionalData: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/causeOfActionAdditionalData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/causeOfActionAdditionalData',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified cause of action additional data. 
         * @summary CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
         * @param {string} causeOfActionAdditionalDataId The causeOfActionAdditionalDataId value of the desired cause of action additional data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionAdditionalData_2: async (causeOfActionAdditionalDataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'causeOfActionAdditionalDataId' is not null or undefined
            assertParamExists('getCauseOfActionAdditionalData_2', 'causeOfActionAdditionalDataId', causeOfActionAdditionalDataId)
            const localVarPath = `/masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}`
                .replace(`{${"causeOfActionAdditionalDataId"}}`, encodeURIComponent(String(causeOfActionAdditionalDataId !== undefined ? causeOfActionAdditionalDataId : `-causeOfActionAdditionalDataId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject 
         * @summary CauseOfAction Object.
         * @param {string} [q] The keyword expression targeting the desired cause of action.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/causeOfAction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/causeOfAction',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject 
         * @summary CauseOfActionGroup Object.
         * @param {string} [q] The keyword expression targeting the desired cause of action group.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionGroup: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/causeOfActionGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/causeOfActionGroup',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified cause of action group. 
         * @summary CauseOfActionGroup Object for the given causeOfActionGroupId.
         * @param {string} causeOfActionGroupId causeOfActionGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionGroup_3: async (causeOfActionGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'causeOfActionGroupId' is not null or undefined
            assertParamExists('getCauseOfActionGroup_3', 'causeOfActionGroupId', causeOfActionGroupId)
            const localVarPath = `/masterData/causeOfActionGroup/{causeOfActionGroupId}`
                .replace(`{${"causeOfActionGroupId"}}`, encodeURIComponent(String(causeOfActionGroupId !== undefined ? causeOfActionGroupId : `-causeOfActionGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/causeOfActionGroup/{causeOfActionGroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified charge additional data. 
         * @summary Charge Additional Data Object for the given chargeAdditionalDataId.
         * @param {string} chargeAdditionalDataId The chargeAdditionalDataId value of the desired charge additional data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeAdditionalData: async (chargeAdditionalDataId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chargeAdditionalDataId' is not null or undefined
            assertParamExists('getChargeAdditionalData', 'chargeAdditionalDataId', chargeAdditionalDataId)
            const localVarPath = `/masterData/chargeAdditionalData/{chargeAdditionalDataId}`
                .replace(`{${"chargeAdditionalDataId"}}`, encodeURIComponent(String(chargeAdditionalDataId !== undefined ? chargeAdditionalDataId : `-chargeAdditionalDataId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeAdditionalData/{chargeAdditionalDataId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified charge. 
         * @summary Charge Object for the given chargeId.
         * @param {string} chargeId The chargeId value of the desired charge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeById: async (chargeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chargeId' is not null or undefined
            assertParamExists('getChargeById', 'chargeId', chargeId)
            const localVarPath = `/masterData/charge/{chargeId}`
                .replace(`{${"chargeId"}}`, encodeURIComponent(String(chargeId !== undefined ? chargeId : `-chargeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/charge/{chargeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified charge degree. 
         * @summary ChargeDegree Object for the given chargeDegreeId.
         * @param {string} chargeDegreeId The chargeDegreeId value of the desired charge degree.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeDegreeById: async (chargeDegreeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chargeDegreeId' is not null or undefined
            assertParamExists('getChargeDegreeById', 'chargeDegreeId', chargeDegreeId)
            const localVarPath = `/masterData/chargeDegree/{chargeDegreeId}`
                .replace(`{${"chargeDegreeId"}}`, encodeURIComponent(String(chargeDegreeId !== undefined ? chargeDegreeId : `-chargeDegreeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeDegree/{chargeDegreeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject 
         * @summary ChargeDegree Object.
         * @param {string} [q] The keyword expression targeting the desired charge degree.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeDegreeUsingKeywordExpression: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/chargeDegree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeDegree',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified charge group. 
         * @summary Charge Group Object for the given chargeGroupId.
         * @param {string} chargeGroupId The chargeGroupId value of the desired charge group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeGroup: async (chargeGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chargeGroupId' is not null or undefined
            assertParamExists('getChargeGroup', 'chargeGroupId', chargeGroupId)
            const localVarPath = `/masterData/chargeGroup/{chargeGroupId}`
                .replace(`{${"chargeGroupId"}}`, encodeURIComponent(String(chargeGroupId !== undefined ? chargeGroupId : `-chargeGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeGroup/{chargeGroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject 
         * @summary Charge Group Object.
         * @param {string} [q] The keyword expression targeting the desired charge group.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeGroupsByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/chargeGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeGroup',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified charge severity. 
         * @summary ChargeSeverity Object for the given chargeSeverityId.
         * @param {string} chargeSeverityId The chargeSeverityId value of the desired charge severity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeSeverity: async (chargeSeverityId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chargeSeverityId' is not null or undefined
            assertParamExists('getChargeSeverity', 'chargeSeverityId', chargeSeverityId)
            const localVarPath = `/masterData/chargeSeverity/{chargeSeverityId}`
                .replace(`{${"chargeSeverityId"}}`, encodeURIComponent(String(chargeSeverityId !== undefined ? chargeSeverityId : `-chargeSeverityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeSeverity/{chargeSeverityId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject 
         * @summary ChargeSeverity Object.
         * @param {string} [q] The keyword expression targeting the desired charge severity.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeSeverityByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/chargeSeverity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/chargeSeverity',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject 
         * @summary Charge Object.
         * @param {string} [q] The keyword expression targeting the desired charge.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargesUsingKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/charge',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified court location or court locations.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject 
         * @summary Courthouse Object.
         * @param {string} [q] The keyword expression that sets forth the criteria concerning the court location or court locations to target. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtLocation: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/courtLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtLocation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contains the Court Location Object. 
         * @summary Courthouse Object for given Court Location Id.
         * @param {string} courtLocationId courtLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtLocationObject: async (courtLocationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtLocationId' is not null or undefined
            assertParamExists('getCourtLocationObject', 'courtLocationId', courtLocationId)
            const localVarPath = `/masterData/courtLocation/{courtLocationId}`
                .replace(`{${"courtLocationId"}}`, encodeURIComponent(String(courtLocationId !== undefined ? courtLocationId : `-courtLocationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtLocation/{courtLocationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the court locations associated with the specified court. 
         * @summary Associated Court Location for given courtId.
         * @param {string} courtId The courtId value of the target court.
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtLocations: async (courtId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            assertParamExists('getCourtLocations', 'courtId', courtId)
            const localVarPath = `/masterData/court/{courtId}/courtLocations`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId !== undefined ? courtId : `-courtId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/court/{courtId}/courtLocations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specified court. 
         * @summary Court Object for given courtId.
         * @param {string} courtId The courtId value of the target court.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtObject: async (courtId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            assertParamExists('getCourtObject', 'courtId', courtId)
            const localVarPath = `/masterData/court/{courtId}`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId !== undefined ? courtId : `-courtId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/court/{courtId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the status of one or more courts using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject 
         * @summary Court Service Status Object.
         * @param {string} [q] The keyword expression targeting the desired court. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtServiceStatus: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/courtServiceStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtServiceStatus',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the court status of the specified court. 
         * @summary Court Service Status Object for the given courtServiceStatusId.
         * @param {string} courtServiceStatusId The courtServiceStatusId value of the desired court.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtServiceStatusById: async (courtServiceStatusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtServiceStatusId' is not null or undefined
            assertParamExists('getCourtServiceStatusById', 'courtServiceStatusId', courtServiceStatusId)
            const localVarPath = `/masterData/courtServiceStatus/{courtServiceStatusId}`
                .replace(`{${"courtServiceStatusId"}}`, encodeURIComponent(String(courtServiceStatusId !== undefined ? courtServiceStatusId : `-courtServiceStatusId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtServiceStatus/{courtServiceStatusId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified court system. 
         * @summary Court System Object for given courtSystemId.
         * @param {string} courtSystemId The courtSystemId value of the court system to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtSystem: async (courtSystemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtSystemId' is not null or undefined
            assertParamExists('getCourtSystem', 'courtSystemId', courtSystemId)
            const localVarPath = `/masterData/courtSystem/{courtSystemId}`
                .replace(`{${"courtSystemId"}}`, encodeURIComponent(String(courtSystemId !== undefined ? courtSystemId : `-courtSystemId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtSystem/{courtSystemId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the information concerning the specific court type. 
         * @summary Court Type Object for given courtTypeId.
         * @param {string} courtTypeId The courtTypeId value of the court type to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtTypeObject: async (courtTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtTypeId' is not null or undefined
            assertParamExists('getCourtTypeObject', 'courtTypeId', courtTypeId)
            const localVarPath = `/masterData/courtType/{courtTypeId}`
                .replace(`{${"courtTypeId"}}`, encodeURIComponent(String(courtTypeId !== undefined ? courtTypeId : `-courtTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtType/{courtTypeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve court types recognized by UniCourt.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject 
         * @summary Court Type Objects.
         * @param {string} [q] The keyword expression that sets forth the criteria concerning the court type or court types. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtTypes: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/courtType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtType',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specified court or courts.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject 
         * @summary Court Objects.
         * @param {string} [q] The keyword expression that sets forth the criteria concerning the court or courts to be retrieved. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourts: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/court`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/court',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the courts associated with the specified court location. 
         * @summary Associated Court for given Court Location.
         * @param {string} courtLocationId The courtLocationId value of the court location for which courts are to be retrieved.
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtsByLocation: async (courtLocationId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtLocationId' is not null or undefined
            assertParamExists('getCourtsByLocation', 'courtLocationId', courtLocationId)
            const localVarPath = `/masterData/courtLocation/{courtLocationId}/courts`
                .replace(`{${"courtLocationId"}}`, encodeURIComponent(String(courtLocationId !== undefined ? courtLocationId : `-courtLocationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtLocation/{courtLocationId}/courts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject 
         * @summary Judge Type Object.
         * @param {string} [q] The keyword expression targeting the judge type.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgeTypeObject: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/judgeType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/judgeType',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified judge type. 
         * @summary Judge Type Object for the given judgeTypeId.
         * @param {string} judgeTypeId The judgeTypeId of the desired judge type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgeTypeObjectById: async (judgeTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'judgeTypeId' is not null or undefined
            assertParamExists('getJudgeTypeObjectById', 'judgeTypeId', judgeTypeId)
            const localVarPath = `/masterData/judgeType/{judgeTypeId}`
                .replace(`{${"judgeTypeId"}}`, encodeURIComponent(String(judgeTypeId !== undefined ? judgeTypeId : `-judgeTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/judgeType/{judgeTypeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified jurisdiction geography. 
         * @summary Jurisdiction Geo Object for given Jurisdiction Geo Id.
         * @param {string} jurisdictionGeoId The jurisdictionGeoId value of the desired jurisdiction geography.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJurisdictionGeo: async (jurisdictionGeoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jurisdictionGeoId' is not null or undefined
            assertParamExists('getJurisdictionGeo', 'jurisdictionGeoId', jurisdictionGeoId)
            const localVarPath = `/masterData/jurisdictionGeo/{jurisdictionGeoId}`
                .replace(`{${"jurisdictionGeoId"}}`, encodeURIComponent(String(jurisdictionGeoId !== undefined ? jurisdictionGeoId : `-jurisdictionGeoId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/jurisdictionGeo/{jurisdictionGeoId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve one or more jurisdiction geographies using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject 
         * @summary Jurisdiction Geo Object.
         * @param {string} [q] The keyword expression targeting the desired jurisdiction geography. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'state'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJurisdictionGeoForCourt: async (q?: string, pageNumber?: number, sort?: 'state', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/jurisdictionGeo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/jurisdictionGeo',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the jurisdiction geography object for the specified court. 
         * @summary Jurisdiction Geo Objects for given courtId.
         * @param {string} courtId The courtId value of the target court.
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'state'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJurisdictionGeoObjectsForCourt: async (courtId: string, pageNumber?: number, sort?: 'state', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            assertParamExists('getJurisdictionGeoObjectsForCourt', 'courtId', courtId)
            const localVarPath = `/masterData/court/{courtId}/jurisdictionGeo`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId !== undefined ? courtId : `-courtId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/court/{courtId}/jurisdictionGeo',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified party role. 
         * @summary Party Role Object.
         * @param {string} partyRoleId The partyRoleId value of the desired party role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRole: async (partyRoleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyRoleId' is not null or undefined
            assertParamExists('getPartyRole', 'partyRoleId', partyRoleId)
            const localVarPath = `/masterData/partyRole/{partyRoleId}`
                .replace(`{${"partyRoleId"}}`, encodeURIComponent(String(partyRoleId !== undefined ? partyRoleId : `-partyRoleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/partyRole/{partyRoleId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the specified party role group. 
         * @summary Party Role Group Object.
         * @param {string} partyRoleGroupId The partyRoleGroupId value of the desired party role group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRoleGroup: async (partyRoleGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyRoleGroupId' is not null or undefined
            assertParamExists('getPartyRoleGroup', 'partyRoleGroupId', partyRoleGroupId)
            const localVarPath = `/masterData/partyRoleGroup/{partyRoleGroupId}`
                .replace(`{${"partyRoleGroupId"}}`, encodeURIComponent(String(partyRoleGroupId !== undefined ? partyRoleGroupId : `-partyRoleGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/partyRoleGroup/{partyRoleGroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject 
         * @summary Party Role Group Object.
         * @param {string} [q] The keyword expression targeting the desired party role group.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRoleGroups: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/partyRoleGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/partyRoleGroup',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject 
         * @summary Party Role Object.
         * @param {string} [q] The keyword expression targeting the desired party role.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRolesByKeyword: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/partyRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/partyRole',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The keyword expression targeting the desired area of law.   ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject 
         * @summary AreaOfLaw Object.
         * @param {string} [q] Retrieve one or more areas of law using a keyword expression. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAreaOfLaw: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/areaOfLaw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/areaOfLaw',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject 
         * @summary CaseTypeGroup Object.
         * @param {string} [q] Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCaseTypeGroups: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/caseTypeGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/caseTypeGroup',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about the specified court system or court systems.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject 
         * @summary Court System Objects.
         * @param {string} [q] The keyword expression that sets forth the criteria concerning the court system or court systems. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt; 
         * @param {number} [pageNumber] The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
         * @param {'name'} [sort] The field according to which search results are to be sorted.
         * @param {'asc' | 'desc'} [order] Whether search results are to be shown in ascending or descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCourtSystems: async (q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masterData/courtSystem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/masterData/courtSystem',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourtStandardsApiApi - functional programming interface
 * @export
 */
export const CourtStandardsApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourtStandardsApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns Associated Court for given Jurisdiction Geo. 
         * @summary Associated Court for given Jurisdiction Geo.
         * @param {CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associatedCourtForJurisdictionGeo(requestParameters: CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associatedCourtForJurisdictionGeo(requestParameters.jurisdictionGeoId, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject 
         * @summary Charge Additional Data Object.
         * @param {CourtStandardsApiApiGetAdditionalChargeInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalChargeInfo(requestParameters: CourtStandardsApiApiGetAdditionalChargeInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeAdditionalDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalChargeInfo(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the appeals courts associated with the specified court. 
         * @summary Appeal Court Objects for given courtId.
         * @param {CourtStandardsApiApiGetAppealCourtsForCourtRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppealCourtsForCourt(requestParameters: CourtStandardsApiApiGetAppealCourtsForCourtRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppealCourtsForCourt(requestParameters.courtId, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified area of law. 
         * @summary AreaOfLaw Object for the given AreaOfLaw Id.
         * @param {CourtStandardsApiApiGetAreaOfLawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAreaOfLaw(requestParameters: CourtStandardsApiApiGetAreaOfLawRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AreaOfLaw>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAreaOfLaw(requestParameters.areaOfLawId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above. ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject 
         * @summary Attorney Representation Type Object.
         * @param {CourtStandardsApiApiGetAttorneyRepTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttorneyRepType(requestParameters: CourtStandardsApiApiGetAttorneyRepTypeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttorneyRepresentationTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttorneyRepType(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified attorney representation type. 
         * @summary Attorney Representation Type Object for the given attorneyRepresentationTypeId.
         * @param {CourtStandardsApiApiGetAttorneyRepType0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttorneyRepType_1(requestParameters: CourtStandardsApiApiGetAttorneyRepType0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttorneyRepresentationType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttorneyRepType_1(requestParameters.attorneyRepresentationTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specified attorney type object. 
         * @summary Attorney Type Object for given Attorney Type Id.
         * @param {CourtStandardsApiApiGetAttorneyTypeObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttorneyTypeObject(requestParameters: CourtStandardsApiApiGetAttorneyTypeObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttorneyType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttorneyTypeObject(requestParameters.attorneyTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject 
         * @summary Attorney Type Object.
         * @param {CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttorneyTypeUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttorneyTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttorneyTypeUsingKeywordExpression(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified case class. 
         * @summary Case Class Object for the given Case Class Id.
         * @param {CourtStandardsApiApiGetCaseClassByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseClassById(requestParameters: CourtStandardsApiApiGetCaseClassByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseClassById(requestParameters.caseClassId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject 
         * @summary Case Class Object.
         * @param {CourtStandardsApiApiGetCaseClassByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseClassByKeyword(requestParameters: CourtStandardsApiApiGetCaseClassByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseClassResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseClassByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified case relationship type. 
         * @summary Case Relationship Type Object for the given caseRelationshipTypeId.
         * @param {CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseRelationshipTypeById(requestParameters: CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseRelationshipType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseRelationshipTypeById(requestParameters.caseRelationshipTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject 
         * @summary Case Relationship Type Object.
         * @param {CourtStandardsApiApiGetCaseRelationshipTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseRelationshipTypes(requestParameters: CourtStandardsApiApiGetCaseRelationshipTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseRelationshipTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseRelationshipTypes(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified case status. 
         * @summary Returns the caseStatus information for the given caseStatusId.
         * @param {CourtStandardsApiApiGetCaseStatusByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseStatusById(requestParameters: CourtStandardsApiApiGetCaseStatusByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseStatusById(requestParameters.caseStatusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject 
         * @summary Case Status Object.
         * @param {CourtStandardsApiApiGetCaseStatusByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseStatusByKeyword(requestParameters: CourtStandardsApiApiGetCaseStatusByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseStatusByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified case status group. 
         * @summary Returns the caseStatusGroup information for the given caseStatusGroupId.
         * @param {CourtStandardsApiApiGetCaseStatusGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseStatusGroup(requestParameters: CourtStandardsApiApiGetCaseStatusGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseStatusGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseStatusGroup(requestParameters.caseStatusGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject 
         * @summary Case Status Group Object.
         * @param {CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseStatusGroupUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseStatusGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseStatusGroupUsingKeywordExpression(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified case type. 
         * @summary CaseType Object for given Case Type Id.
         * @param {CourtStandardsApiApiGetCaseTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseType(requestParameters: CourtStandardsApiApiGetCaseTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseType(requestParameters.caseTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified case type group. 
         * @summary CaseType Group for the given CaseType Group Id.
         * @param {CourtStandardsApiApiGetCaseTypeGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseTypeGroup(requestParameters: CourtStandardsApiApiGetCaseTypeGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseTypeGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseTypeGroup(requestParameters.caseTypeGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject 
         * @summary Case Type Object.
         * @param {CourtStandardsApiApiGetCaseTypesByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseTypesByKeyword(requestParameters: CourtStandardsApiApiGetCaseTypesByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseTypesByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified cause of action. 
         * @summary CauseOfAction Object for the given causeOfActionId.
         * @param {CourtStandardsApiApiGetCauseOfActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCauseOfAction(requestParameters: CourtStandardsApiApiGetCauseOfActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CauseOfAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCauseOfAction(requestParameters.causeOfActionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject 
         * @summary CauseOfActionAdditionaData Object.
         * @param {CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCauseOfActionAdditionalData(requestParameters: CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CauseOfActionAdditionalDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCauseOfActionAdditionalData(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified cause of action additional data. 
         * @summary CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
         * @param {CourtStandardsApiApiGetCauseOfActionAdditionalData0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCauseOfActionAdditionalData_2(requestParameters: CourtStandardsApiApiGetCauseOfActionAdditionalData0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CauseOfActionAdditionalData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCauseOfActionAdditionalData_2(requestParameters.causeOfActionAdditionalDataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject 
         * @summary CauseOfAction Object.
         * @param {CourtStandardsApiApiGetCauseOfActionByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCauseOfActionByKeyword(requestParameters: CourtStandardsApiApiGetCauseOfActionByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CauseOfActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCauseOfActionByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject 
         * @summary CauseOfActionGroup Object.
         * @param {CourtStandardsApiApiGetCauseOfActionGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCauseOfActionGroup(requestParameters: CourtStandardsApiApiGetCauseOfActionGroupRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CauseOfActionGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCauseOfActionGroup(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified cause of action group. 
         * @summary CauseOfActionGroup Object for the given causeOfActionGroupId.
         * @param {CourtStandardsApiApiGetCauseOfActionGroup0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCauseOfActionGroup_3(requestParameters: CourtStandardsApiApiGetCauseOfActionGroup0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CauseOfActionGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCauseOfActionGroup_3(requestParameters.causeOfActionGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified charge additional data. 
         * @summary Charge Additional Data Object for the given chargeAdditionalDataId.
         * @param {CourtStandardsApiApiGetChargeAdditionalDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeAdditionalData(requestParameters: CourtStandardsApiApiGetChargeAdditionalDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeAdditionalData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeAdditionalData(requestParameters.chargeAdditionalDataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified charge. 
         * @summary Charge Object for the given chargeId.
         * @param {CourtStandardsApiApiGetChargeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeById(requestParameters: CourtStandardsApiApiGetChargeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Charge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeById(requestParameters.chargeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified charge degree. 
         * @summary ChargeDegree Object for the given chargeDegreeId.
         * @param {CourtStandardsApiApiGetChargeDegreeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeDegreeById(requestParameters: CourtStandardsApiApiGetChargeDegreeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeDegree>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeDegreeById(requestParameters.chargeDegreeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject 
         * @summary ChargeDegree Object.
         * @param {CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeDegreeUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeDegreeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeDegreeUsingKeywordExpression(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified charge group. 
         * @summary Charge Group Object for the given chargeGroupId.
         * @param {CourtStandardsApiApiGetChargeGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeGroup(requestParameters: CourtStandardsApiApiGetChargeGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeGroup(requestParameters.chargeGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject 
         * @summary Charge Group Object.
         * @param {CourtStandardsApiApiGetChargeGroupsByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeGroupsByKeyword(requestParameters: CourtStandardsApiApiGetChargeGroupsByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeGroupsByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified charge severity. 
         * @summary ChargeSeverity Object for the given chargeSeverityId.
         * @param {CourtStandardsApiApiGetChargeSeverityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeSeverity(requestParameters: CourtStandardsApiApiGetChargeSeverityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeSeverity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeSeverity(requestParameters.chargeSeverityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject 
         * @summary ChargeSeverity Object.
         * @param {CourtStandardsApiApiGetChargeSeverityByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeSeverityByKeyword(requestParameters: CourtStandardsApiApiGetChargeSeverityByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeSeverityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeSeverityByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject 
         * @summary Charge Object.
         * @param {CourtStandardsApiApiGetChargesUsingKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargesUsingKeyword(requestParameters: CourtStandardsApiApiGetChargesUsingKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargesUsingKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified court location or court locations.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject 
         * @summary Courthouse Object.
         * @param {CourtStandardsApiApiGetCourtLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtLocation(requestParameters: CourtStandardsApiApiGetCourtLocationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtLocation(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Contains the Court Location Object. 
         * @summary Courthouse Object for given Court Location Id.
         * @param {CourtStandardsApiApiGetCourtLocationObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtLocationObject(requestParameters: CourtStandardsApiApiGetCourtLocationObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtLocationObject(requestParameters.courtLocationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the court locations associated with the specified court. 
         * @summary Associated Court Location for given courtId.
         * @param {CourtStandardsApiApiGetCourtLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtLocations(requestParameters: CourtStandardsApiApiGetCourtLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtLocations(requestParameters.courtId, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information about a specified court. 
         * @summary Court Object for given courtId.
         * @param {CourtStandardsApiApiGetCourtObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtObject(requestParameters: CourtStandardsApiApiGetCourtObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Court>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtObject(requestParameters.courtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the status of one or more courts using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject 
         * @summary Court Service Status Object.
         * @param {CourtStandardsApiApiGetCourtServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtServiceStatus(requestParameters: CourtStandardsApiApiGetCourtServiceStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtServiceStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtServiceStatus(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the court status of the specified court. 
         * @summary Court Service Status Object for the given courtServiceStatusId.
         * @param {CourtStandardsApiApiGetCourtServiceStatusByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtServiceStatusById(requestParameters: CourtStandardsApiApiGetCourtServiceStatusByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtServiceStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtServiceStatusById(requestParameters.courtServiceStatusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified court system. 
         * @summary Court System Object for given courtSystemId.
         * @param {CourtStandardsApiApiGetCourtSystemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtSystem(requestParameters: CourtStandardsApiApiGetCourtSystemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtSystem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtSystem(requestParameters.courtSystemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the information concerning the specific court type. 
         * @summary Court Type Object for given courtTypeId.
         * @param {CourtStandardsApiApiGetCourtTypeObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtTypeObject(requestParameters: CourtStandardsApiApiGetCourtTypeObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtTypeObject(requestParameters.courtTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve court types recognized by UniCourt.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject 
         * @summary Court Type Objects.
         * @param {CourtStandardsApiApiGetCourtTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtTypes(requestParameters: CourtStandardsApiApiGetCourtTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtTypes(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information about a specified court or courts.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject 
         * @summary Court Objects.
         * @param {CourtStandardsApiApiGetCourtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourts(requestParameters: CourtStandardsApiApiGetCourtsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourts(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the courts associated with the specified court location. 
         * @summary Associated Court for given Court Location.
         * @param {CourtStandardsApiApiGetCourtsByLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtsByLocation(requestParameters: CourtStandardsApiApiGetCourtsByLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourtsByLocation(requestParameters.courtLocationId, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject 
         * @summary Judge Type Object.
         * @param {CourtStandardsApiApiGetJudgeTypeObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJudgeTypeObject(requestParameters: CourtStandardsApiApiGetJudgeTypeObjectRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JudgeTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJudgeTypeObject(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified judge type. 
         * @summary Judge Type Object for the given judgeTypeId.
         * @param {CourtStandardsApiApiGetJudgeTypeObjectByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJudgeTypeObjectById(requestParameters: CourtStandardsApiApiGetJudgeTypeObjectByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JudgeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJudgeTypeObjectById(requestParameters.judgeTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified jurisdiction geography. 
         * @summary Jurisdiction Geo Object for given Jurisdiction Geo Id.
         * @param {CourtStandardsApiApiGetJurisdictionGeoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJurisdictionGeo(requestParameters: CourtStandardsApiApiGetJurisdictionGeoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JurisdictionGeo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJurisdictionGeo(requestParameters.jurisdictionGeoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve one or more jurisdiction geographies using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject 
         * @summary Jurisdiction Geo Object.
         * @param {CourtStandardsApiApiGetJurisdictionGeoForCourtRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJurisdictionGeoForCourt(requestParameters: CourtStandardsApiApiGetJurisdictionGeoForCourtRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JurisdictionGeoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJurisdictionGeoForCourt(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the jurisdiction geography object for the specified court. 
         * @summary Jurisdiction Geo Objects for given courtId.
         * @param {CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJurisdictionGeoObjectsForCourt(requestParameters: CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JurisdictionGeoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJurisdictionGeoObjectsForCourt(requestParameters.courtId, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified party role. 
         * @summary Party Role Object.
         * @param {CourtStandardsApiApiGetPartyRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyRole(requestParameters: CourtStandardsApiApiGetPartyRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyRole(requestParameters.partyRoleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the specified party role group. 
         * @summary Party Role Group Object.
         * @param {CourtStandardsApiApiGetPartyRoleGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyRoleGroup(requestParameters: CourtStandardsApiApiGetPartyRoleGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyRoleGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyRoleGroup(requestParameters.partyRoleGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject 
         * @summary Party Role Group Object.
         * @param {CourtStandardsApiApiGetPartyRoleGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyRoleGroups(requestParameters: CourtStandardsApiApiGetPartyRoleGroupsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyRoleGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyRoleGroups(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject 
         * @summary Party Role Object.
         * @param {CourtStandardsApiApiGetPartyRolesByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyRolesByKeyword(requestParameters: CourtStandardsApiApiGetPartyRolesByKeywordRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyRolesByKeyword(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The keyword expression targeting the desired area of law.   ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject 
         * @summary AreaOfLaw Object.
         * @param {CourtStandardsApiApiListAreaOfLawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAreaOfLaw(requestParameters: CourtStandardsApiApiListAreaOfLawRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AreaOfLawResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAreaOfLaw(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject 
         * @summary CaseTypeGroup Object.
         * @param {CourtStandardsApiApiListCaseTypeGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCaseTypeGroups(requestParameters: CourtStandardsApiApiListCaseTypeGroupsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseTypeGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCaseTypeGroups(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information about the specified court system or court systems.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject 
         * @summary Court System Objects.
         * @param {CourtStandardsApiApiListCourtSystemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCourtSystems(requestParameters: CourtStandardsApiApiListCourtSystemsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourtSystemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCourtSystems(requestParameters.q, requestParameters.pageNumber, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CourtStandardsApiApi - factory interface
 * @export
 */
export const CourtStandardsApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourtStandardsApiApiFp(configuration)
    return {
        /**
         * Returns Associated Court for given Jurisdiction Geo. 
         * @summary Associated Court for given Jurisdiction Geo.
         * @param {CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associatedCourtForJurisdictionGeo(requestParameters: CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest, options?: AxiosRequestConfig): AxiosPromise<CourtResponse> {
            return localVarFp.associatedCourtForJurisdictionGeo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject 
         * @summary Charge Additional Data Object.
         * @param {CourtStandardsApiApiGetAdditionalChargeInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalChargeInfo(requestParameters: CourtStandardsApiApiGetAdditionalChargeInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChargeAdditionalDataResponse> {
            return localVarFp.getAdditionalChargeInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the appeals courts associated with the specified court. 
         * @summary Appeal Court Objects for given courtId.
         * @param {CourtStandardsApiApiGetAppealCourtsForCourtRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppealCourtsForCourt(requestParameters: CourtStandardsApiApiGetAppealCourtsForCourtRequest, options?: AxiosRequestConfig): AxiosPromise<CourtResponse> {
            return localVarFp.getAppealCourtsForCourt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified area of law. 
         * @summary AreaOfLaw Object for the given AreaOfLaw Id.
         * @param {CourtStandardsApiApiGetAreaOfLawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAreaOfLaw(requestParameters: CourtStandardsApiApiGetAreaOfLawRequest, options?: AxiosRequestConfig): AxiosPromise<AreaOfLaw> {
            return localVarFp.getAreaOfLaw(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above. ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject 
         * @summary Attorney Representation Type Object.
         * @param {CourtStandardsApiApiGetAttorneyRepTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyRepType(requestParameters: CourtStandardsApiApiGetAttorneyRepTypeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AttorneyRepresentationTypeResponse> {
            return localVarFp.getAttorneyRepType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified attorney representation type. 
         * @summary Attorney Representation Type Object for the given attorneyRepresentationTypeId.
         * @param {CourtStandardsApiApiGetAttorneyRepType0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyRepType_1(requestParameters: CourtStandardsApiApiGetAttorneyRepType0Request, options?: AxiosRequestConfig): AxiosPromise<AttorneyRepresentationType> {
            return localVarFp.getAttorneyRepType_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specified attorney type object. 
         * @summary Attorney Type Object for given Attorney Type Id.
         * @param {CourtStandardsApiApiGetAttorneyTypeObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyTypeObject(requestParameters: CourtStandardsApiApiGetAttorneyTypeObjectRequest, options?: AxiosRequestConfig): AxiosPromise<AttorneyType> {
            return localVarFp.getAttorneyTypeObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject 
         * @summary Attorney Type Object.
         * @param {CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttorneyTypeUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AttorneyTypeResponse> {
            return localVarFp.getAttorneyTypeUsingKeywordExpression(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified case class. 
         * @summary Case Class Object for the given Case Class Id.
         * @param {CourtStandardsApiApiGetCaseClassByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClassById(requestParameters: CourtStandardsApiApiGetCaseClassByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseClass> {
            return localVarFp.getCaseClassById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject 
         * @summary Case Class Object.
         * @param {CourtStandardsApiApiGetCaseClassByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClassByKeyword(requestParameters: CourtStandardsApiApiGetCaseClassByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseClassResponse> {
            return localVarFp.getCaseClassByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified case relationship type. 
         * @summary Case Relationship Type Object for the given caseRelationshipTypeId.
         * @param {CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseRelationshipTypeById(requestParameters: CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseRelationshipType> {
            return localVarFp.getCaseRelationshipTypeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject 
         * @summary Case Relationship Type Object.
         * @param {CourtStandardsApiApiGetCaseRelationshipTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseRelationshipTypes(requestParameters: CourtStandardsApiApiGetCaseRelationshipTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseRelationshipTypeResponse> {
            return localVarFp.getCaseRelationshipTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified case status. 
         * @summary Returns the caseStatus information for the given caseStatusId.
         * @param {CourtStandardsApiApiGetCaseStatusByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusById(requestParameters: CourtStandardsApiApiGetCaseStatusByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseStatus> {
            return localVarFp.getCaseStatusById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject 
         * @summary Case Status Object.
         * @param {CourtStandardsApiApiGetCaseStatusByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusByKeyword(requestParameters: CourtStandardsApiApiGetCaseStatusByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseStatusResponse> {
            return localVarFp.getCaseStatusByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified case status group. 
         * @summary Returns the caseStatusGroup information for the given caseStatusGroupId.
         * @param {CourtStandardsApiApiGetCaseStatusGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusGroup(requestParameters: CourtStandardsApiApiGetCaseStatusGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CaseStatusGroup> {
            return localVarFp.getCaseStatusGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject 
         * @summary Case Status Group Object.
         * @param {CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusGroupUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseStatusGroupResponse> {
            return localVarFp.getCaseStatusGroupUsingKeywordExpression(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified case type. 
         * @summary CaseType Object for given Case Type Id.
         * @param {CourtStandardsApiApiGetCaseTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseType(requestParameters: CourtStandardsApiApiGetCaseTypeRequest, options?: AxiosRequestConfig): AxiosPromise<CaseType> {
            return localVarFp.getCaseType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified case type group. 
         * @summary CaseType Group for the given CaseType Group Id.
         * @param {CourtStandardsApiApiGetCaseTypeGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTypeGroup(requestParameters: CourtStandardsApiApiGetCaseTypeGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CaseTypeGroup> {
            return localVarFp.getCaseTypeGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject 
         * @summary Case Type Object.
         * @param {CourtStandardsApiApiGetCaseTypesByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTypesByKeyword(requestParameters: CourtStandardsApiApiGetCaseTypesByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseTypeResponse> {
            return localVarFp.getCaseTypesByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified cause of action. 
         * @summary CauseOfAction Object for the given causeOfActionId.
         * @param {CourtStandardsApiApiGetCauseOfActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfAction(requestParameters: CourtStandardsApiApiGetCauseOfActionRequest, options?: AxiosRequestConfig): AxiosPromise<CauseOfAction> {
            return localVarFp.getCauseOfAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject 
         * @summary CauseOfActionAdditionaData Object.
         * @param {CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionAdditionalData(requestParameters: CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CauseOfActionAdditionalDataResponse> {
            return localVarFp.getCauseOfActionAdditionalData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified cause of action additional data. 
         * @summary CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
         * @param {CourtStandardsApiApiGetCauseOfActionAdditionalData0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionAdditionalData_2(requestParameters: CourtStandardsApiApiGetCauseOfActionAdditionalData0Request, options?: AxiosRequestConfig): AxiosPromise<CauseOfActionAdditionalData> {
            return localVarFp.getCauseOfActionAdditionalData_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject 
         * @summary CauseOfAction Object.
         * @param {CourtStandardsApiApiGetCauseOfActionByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionByKeyword(requestParameters: CourtStandardsApiApiGetCauseOfActionByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CauseOfActionResponse> {
            return localVarFp.getCauseOfActionByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject 
         * @summary CauseOfActionGroup Object.
         * @param {CourtStandardsApiApiGetCauseOfActionGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionGroup(requestParameters: CourtStandardsApiApiGetCauseOfActionGroupRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CauseOfActionGroupResponse> {
            return localVarFp.getCauseOfActionGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified cause of action group. 
         * @summary CauseOfActionGroup Object for the given causeOfActionGroupId.
         * @param {CourtStandardsApiApiGetCauseOfActionGroup0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCauseOfActionGroup_3(requestParameters: CourtStandardsApiApiGetCauseOfActionGroup0Request, options?: AxiosRequestConfig): AxiosPromise<CauseOfActionGroup> {
            return localVarFp.getCauseOfActionGroup_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified charge additional data. 
         * @summary Charge Additional Data Object for the given chargeAdditionalDataId.
         * @param {CourtStandardsApiApiGetChargeAdditionalDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeAdditionalData(requestParameters: CourtStandardsApiApiGetChargeAdditionalDataRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeAdditionalData> {
            return localVarFp.getChargeAdditionalData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified charge. 
         * @summary Charge Object for the given chargeId.
         * @param {CourtStandardsApiApiGetChargeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeById(requestParameters: CourtStandardsApiApiGetChargeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Charge> {
            return localVarFp.getChargeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified charge degree. 
         * @summary ChargeDegree Object for the given chargeDegreeId.
         * @param {CourtStandardsApiApiGetChargeDegreeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeDegreeById(requestParameters: CourtStandardsApiApiGetChargeDegreeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeDegree> {
            return localVarFp.getChargeDegreeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject 
         * @summary ChargeDegree Object.
         * @param {CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeDegreeUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChargeDegreeResponse> {
            return localVarFp.getChargeDegreeUsingKeywordExpression(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified charge group. 
         * @summary Charge Group Object for the given chargeGroupId.
         * @param {CourtStandardsApiApiGetChargeGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeGroup(requestParameters: CourtStandardsApiApiGetChargeGroupRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeGroup> {
            return localVarFp.getChargeGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject 
         * @summary Charge Group Object.
         * @param {CourtStandardsApiApiGetChargeGroupsByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeGroupsByKeyword(requestParameters: CourtStandardsApiApiGetChargeGroupsByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChargeGroupResponse> {
            return localVarFp.getChargeGroupsByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified charge severity. 
         * @summary ChargeSeverity Object for the given chargeSeverityId.
         * @param {CourtStandardsApiApiGetChargeSeverityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeSeverity(requestParameters: CourtStandardsApiApiGetChargeSeverityRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeSeverity> {
            return localVarFp.getChargeSeverity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject 
         * @summary ChargeSeverity Object.
         * @param {CourtStandardsApiApiGetChargeSeverityByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeSeverityByKeyword(requestParameters: CourtStandardsApiApiGetChargeSeverityByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChargeSeverityResponse> {
            return localVarFp.getChargeSeverityByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject 
         * @summary Charge Object.
         * @param {CourtStandardsApiApiGetChargesUsingKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargesUsingKeyword(requestParameters: CourtStandardsApiApiGetChargesUsingKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChargeResponse> {
            return localVarFp.getChargesUsingKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified court location or court locations.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject 
         * @summary Courthouse Object.
         * @param {CourtStandardsApiApiGetCourtLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtLocation(requestParameters: CourtStandardsApiApiGetCourtLocationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CourtLocationResponse> {
            return localVarFp.getCourtLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Contains the Court Location Object. 
         * @summary Courthouse Object for given Court Location Id.
         * @param {CourtStandardsApiApiGetCourtLocationObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtLocationObject(requestParameters: CourtStandardsApiApiGetCourtLocationObjectRequest, options?: AxiosRequestConfig): AxiosPromise<CourtLocation> {
            return localVarFp.getCourtLocationObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the court locations associated with the specified court. 
         * @summary Associated Court Location for given courtId.
         * @param {CourtStandardsApiApiGetCourtLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtLocations(requestParameters: CourtStandardsApiApiGetCourtLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<CourtLocationResponse> {
            return localVarFp.getCourtLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specified court. 
         * @summary Court Object for given courtId.
         * @param {CourtStandardsApiApiGetCourtObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtObject(requestParameters: CourtStandardsApiApiGetCourtObjectRequest, options?: AxiosRequestConfig): AxiosPromise<Court> {
            return localVarFp.getCourtObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the status of one or more courts using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject 
         * @summary Court Service Status Object.
         * @param {CourtStandardsApiApiGetCourtServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtServiceStatus(requestParameters: CourtStandardsApiApiGetCourtServiceStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CourtServiceStatusResponse> {
            return localVarFp.getCourtServiceStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the court status of the specified court. 
         * @summary Court Service Status Object for the given courtServiceStatusId.
         * @param {CourtStandardsApiApiGetCourtServiceStatusByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtServiceStatusById(requestParameters: CourtStandardsApiApiGetCourtServiceStatusByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CourtServiceStatus> {
            return localVarFp.getCourtServiceStatusById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified court system. 
         * @summary Court System Object for given courtSystemId.
         * @param {CourtStandardsApiApiGetCourtSystemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtSystem(requestParameters: CourtStandardsApiApiGetCourtSystemRequest, options?: AxiosRequestConfig): AxiosPromise<CourtSystem> {
            return localVarFp.getCourtSystem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the information concerning the specific court type. 
         * @summary Court Type Object for given courtTypeId.
         * @param {CourtStandardsApiApiGetCourtTypeObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtTypeObject(requestParameters: CourtStandardsApiApiGetCourtTypeObjectRequest, options?: AxiosRequestConfig): AxiosPromise<CourtType> {
            return localVarFp.getCourtTypeObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve court types recognized by UniCourt.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject 
         * @summary Court Type Objects.
         * @param {CourtStandardsApiApiGetCourtTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtTypes(requestParameters: CourtStandardsApiApiGetCourtTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CourtTypeResponse> {
            return localVarFp.getCourtTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specified court or courts.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject 
         * @summary Court Objects.
         * @param {CourtStandardsApiApiGetCourtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourts(requestParameters: CourtStandardsApiApiGetCourtsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CourtResponse> {
            return localVarFp.getCourts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the courts associated with the specified court location. 
         * @summary Associated Court for given Court Location.
         * @param {CourtStandardsApiApiGetCourtsByLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtsByLocation(requestParameters: CourtStandardsApiApiGetCourtsByLocationRequest, options?: AxiosRequestConfig): AxiosPromise<CourtResponse> {
            return localVarFp.getCourtsByLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject 
         * @summary Judge Type Object.
         * @param {CourtStandardsApiApiGetJudgeTypeObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgeTypeObject(requestParameters: CourtStandardsApiApiGetJudgeTypeObjectRequest = {}, options?: AxiosRequestConfig): AxiosPromise<JudgeTypeResponse> {
            return localVarFp.getJudgeTypeObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified judge type. 
         * @summary Judge Type Object for the given judgeTypeId.
         * @param {CourtStandardsApiApiGetJudgeTypeObjectByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJudgeTypeObjectById(requestParameters: CourtStandardsApiApiGetJudgeTypeObjectByIdRequest, options?: AxiosRequestConfig): AxiosPromise<JudgeType> {
            return localVarFp.getJudgeTypeObjectById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified jurisdiction geography. 
         * @summary Jurisdiction Geo Object for given Jurisdiction Geo Id.
         * @param {CourtStandardsApiApiGetJurisdictionGeoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJurisdictionGeo(requestParameters: CourtStandardsApiApiGetJurisdictionGeoRequest, options?: AxiosRequestConfig): AxiosPromise<JurisdictionGeo> {
            return localVarFp.getJurisdictionGeo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve one or more jurisdiction geographies using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject 
         * @summary Jurisdiction Geo Object.
         * @param {CourtStandardsApiApiGetJurisdictionGeoForCourtRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJurisdictionGeoForCourt(requestParameters: CourtStandardsApiApiGetJurisdictionGeoForCourtRequest = {}, options?: AxiosRequestConfig): AxiosPromise<JurisdictionGeoResponse> {
            return localVarFp.getJurisdictionGeoForCourt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the jurisdiction geography object for the specified court. 
         * @summary Jurisdiction Geo Objects for given courtId.
         * @param {CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJurisdictionGeoObjectsForCourt(requestParameters: CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest, options?: AxiosRequestConfig): AxiosPromise<JurisdictionGeoResponse> {
            return localVarFp.getJurisdictionGeoObjectsForCourt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified party role. 
         * @summary Party Role Object.
         * @param {CourtStandardsApiApiGetPartyRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRole(requestParameters: CourtStandardsApiApiGetPartyRoleRequest, options?: AxiosRequestConfig): AxiosPromise<PartyRole> {
            return localVarFp.getPartyRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the specified party role group. 
         * @summary Party Role Group Object.
         * @param {CourtStandardsApiApiGetPartyRoleGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRoleGroup(requestParameters: CourtStandardsApiApiGetPartyRoleGroupRequest, options?: AxiosRequestConfig): AxiosPromise<PartyRoleGroup> {
            return localVarFp.getPartyRoleGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject 
         * @summary Party Role Group Object.
         * @param {CourtStandardsApiApiGetPartyRoleGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRoleGroups(requestParameters: CourtStandardsApiApiGetPartyRoleGroupsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PartyRoleGroupResponse> {
            return localVarFp.getPartyRoleGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject 
         * @summary Party Role Object.
         * @param {CourtStandardsApiApiGetPartyRolesByKeywordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyRolesByKeyword(requestParameters: CourtStandardsApiApiGetPartyRolesByKeywordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PartyRoleResponse> {
            return localVarFp.getPartyRolesByKeyword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The keyword expression targeting the desired area of law.   ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject 
         * @summary AreaOfLaw Object.
         * @param {CourtStandardsApiApiListAreaOfLawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAreaOfLaw(requestParameters: CourtStandardsApiApiListAreaOfLawRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AreaOfLawResponse> {
            return localVarFp.listAreaOfLaw(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject 
         * @summary CaseTypeGroup Object.
         * @param {CourtStandardsApiApiListCaseTypeGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCaseTypeGroups(requestParameters: CourtStandardsApiApiListCaseTypeGroupsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseTypeGroupResponse> {
            return localVarFp.listCaseTypeGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about the specified court system or court systems.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject 
         * @summary Court System Objects.
         * @param {CourtStandardsApiApiListCourtSystemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCourtSystems(requestParameters: CourtStandardsApiApiListCourtSystemsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CourtSystemResponse> {
            return localVarFp.listCourtSystems(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for associatedCourtForJurisdictionGeo operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest
 */
export type CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest = {
    
    /**
    * jurisdictionGeoId
    * @type {string}
    * @memberof CourtStandardsApiApiAssociatedCourtForJurisdictionGeo
    */
    readonly jurisdictionGeoId: string
    
    /**
    * Page number. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiAssociatedCourtForJurisdictionGeo
    */
    readonly pageNumber?: number
    
    /**
    * Sort field.
    * @type {'name'}
    * @memberof CourtStandardsApiApiAssociatedCourtForJurisdictionGeo
    */
    readonly sort?: 'name'
    
    /**
    * Sort order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiAssociatedCourtForJurisdictionGeo
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getAdditionalChargeInfo operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAdditionalChargeInfoRequest
 */
export type CourtStandardsApiApiGetAdditionalChargeInfoRequest = {
    
    /**
    * The keyword expression targeting the desired charge additional data.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetAdditionalChargeInfo
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetAdditionalChargeInfo
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetAdditionalChargeInfo
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetAdditionalChargeInfo
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getAppealCourtsForCourt operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAppealCourtsForCourtRequest
 */
export type CourtStandardsApiApiGetAppealCourtsForCourtRequest = {
    
    /**
    * The courtId value of the target court.
    * @type {string}
    * @memberof CourtStandardsApiApiGetAppealCourtsForCourt
    */
    readonly courtId: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetAppealCourtsForCourt
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetAppealCourtsForCourt
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetAppealCourtsForCourt
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getAreaOfLaw operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAreaOfLawRequest
 */
export type CourtStandardsApiApiGetAreaOfLawRequest = {
    
    /**
    * The areaOfLawId value of the desired area of law.
    * @type {string}
    * @memberof CourtStandardsApiApiGetAreaOfLaw
    */
    readonly areaOfLawId: string
    
}

/**
 * Request parameters for getAttorneyRepType operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAttorneyRepTypeRequest
 */
export type CourtStandardsApiApiGetAttorneyRepTypeRequest = {
    
    /**
    * The keyword expression targeting the attorney representation type.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetAttorneyRepType
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetAttorneyRepType
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetAttorneyRepType
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetAttorneyRepType
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getAttorneyRepType_1 operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAttorneyRepType0Request
 */
export type CourtStandardsApiApiGetAttorneyRepType0Request = {
    
    /**
    * The attorneyRepresentationTypeId value of the desired attorney representation type.
    * @type {string}
    * @memberof CourtStandardsApiApiGetAttorneyRepType0
    */
    readonly attorneyRepresentationTypeId: string
    
}

/**
 * Request parameters for getAttorneyTypeObject operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAttorneyTypeObjectRequest
 */
export type CourtStandardsApiApiGetAttorneyTypeObjectRequest = {
    
    /**
    * The attorneyTypeId value of the desired attorney type.
    * @type {string}
    * @memberof CourtStandardsApiApiGetAttorneyTypeObject
    */
    readonly attorneyTypeId: string
    
}

/**
 * Request parameters for getAttorneyTypeUsingKeywordExpression operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest
 */
export type CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest = {
    
    /**
    * The keyword expression targeting the attorney type.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpression
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpression
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpression
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpression
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCaseClassById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseClassByIdRequest
 */
export type CourtStandardsApiApiGetCaseClassByIdRequest = {
    
    /**
    * The caseClassId value of the desired case class.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseClassById
    */
    readonly caseClassId: string
    
}

/**
 * Request parameters for getCaseClassByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseClassByKeywordRequest
 */
export type CourtStandardsApiApiGetCaseClassByKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired case class.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseClassByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCaseClassByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCaseClassByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCaseClassByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCaseRelationshipTypeById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest
 */
export type CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest = {
    
    /**
    * The caseRelationshipTypeId value of the desired case relationship type.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseRelationshipTypeById
    */
    readonly caseRelationshipTypeId: string
    
}

/**
 * Request parameters for getCaseRelationshipTypes operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseRelationshipTypesRequest
 */
export type CourtStandardsApiApiGetCaseRelationshipTypesRequest = {
    
    /**
    * The keyword expression targeting the case relationship type.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseRelationshipTypes
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCaseRelationshipTypes
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCaseRelationshipTypes
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCaseRelationshipTypes
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCaseStatusById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseStatusByIdRequest
 */
export type CourtStandardsApiApiGetCaseStatusByIdRequest = {
    
    /**
    * The caseStatusId value of the desired case status.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseStatusById
    */
    readonly caseStatusId: string
    
}

/**
 * Request parameters for getCaseStatusByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseStatusByKeywordRequest
 */
export type CourtStandardsApiApiGetCaseStatusByKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired case status.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseStatusByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCaseStatusByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCaseStatusByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCaseStatusByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCaseStatusGroup operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseStatusGroupRequest
 */
export type CourtStandardsApiApiGetCaseStatusGroupRequest = {
    
    /**
    * The caseStatusGroupId value of the desired case status group.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseStatusGroup
    */
    readonly caseStatusGroupId: string
    
}

/**
 * Request parameters for getCaseStatusGroupUsingKeywordExpression operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest
 */
export type CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest = {
    
    /**
    * The keyword expression targeting the desired case status group.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpression
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpression
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpression
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpression
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCaseType operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseTypeRequest
 */
export type CourtStandardsApiApiGetCaseTypeRequest = {
    
    /**
    * The caseTypeId value of the desired case type.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseType
    */
    readonly caseTypeId: string
    
}

/**
 * Request parameters for getCaseTypeGroup operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseTypeGroupRequest
 */
export type CourtStandardsApiApiGetCaseTypeGroupRequest = {
    
    /**
    * caseTypeGroupId
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseTypeGroup
    */
    readonly caseTypeGroupId: string
    
}

/**
 * Request parameters for getCaseTypesByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCaseTypesByKeywordRequest
 */
export type CourtStandardsApiApiGetCaseTypesByKeywordRequest = {
    
    /**
    * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCaseTypesByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCaseTypesByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCaseTypesByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCaseTypesByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCauseOfAction operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCauseOfActionRequest
 */
export type CourtStandardsApiApiGetCauseOfActionRequest = {
    
    /**
    * The causeOfActionId value of the desired cause of action.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCauseOfAction
    */
    readonly causeOfActionId: string
    
}

/**
 * Request parameters for getCauseOfActionAdditionalData operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest
 */
export type CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest = {
    
    /**
    * The keyword expression targeting the desired cause of action additional data.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCauseOfActionAdditionalData
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCauseOfActionAdditionalData
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCauseOfActionAdditionalData
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCauseOfActionAdditionalData
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCauseOfActionAdditionalData_2 operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCauseOfActionAdditionalData0Request
 */
export type CourtStandardsApiApiGetCauseOfActionAdditionalData0Request = {
    
    /**
    * The causeOfActionAdditionalDataId value of the desired cause of action additional data.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCauseOfActionAdditionalData0
    */
    readonly causeOfActionAdditionalDataId: string
    
}

/**
 * Request parameters for getCauseOfActionByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCauseOfActionByKeywordRequest
 */
export type CourtStandardsApiApiGetCauseOfActionByKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired cause of action.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCauseOfActionByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCauseOfActionByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCauseOfActionByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCauseOfActionByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCauseOfActionGroup operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCauseOfActionGroupRequest
 */
export type CourtStandardsApiApiGetCauseOfActionGroupRequest = {
    
    /**
    * The keyword expression targeting the desired cause of action group.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCauseOfActionGroup
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCauseOfActionGroup
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCauseOfActionGroup
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCauseOfActionGroup
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCauseOfActionGroup_3 operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCauseOfActionGroup0Request
 */
export type CourtStandardsApiApiGetCauseOfActionGroup0Request = {
    
    /**
    * causeOfActionGroupId
    * @type {string}
    * @memberof CourtStandardsApiApiGetCauseOfActionGroup0
    */
    readonly causeOfActionGroupId: string
    
}

/**
 * Request parameters for getChargeAdditionalData operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeAdditionalDataRequest
 */
export type CourtStandardsApiApiGetChargeAdditionalDataRequest = {
    
    /**
    * The chargeAdditionalDataId value of the desired charge additional data.
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeAdditionalData
    */
    readonly chargeAdditionalDataId: string
    
}

/**
 * Request parameters for getChargeById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeByIdRequest
 */
export type CourtStandardsApiApiGetChargeByIdRequest = {
    
    /**
    * The chargeId value of the desired charge.
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeById
    */
    readonly chargeId: string
    
}

/**
 * Request parameters for getChargeDegreeById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeDegreeByIdRequest
 */
export type CourtStandardsApiApiGetChargeDegreeByIdRequest = {
    
    /**
    * The chargeDegreeId value of the desired charge degree.
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeDegreeById
    */
    readonly chargeDegreeId: string
    
}

/**
 * Request parameters for getChargeDegreeUsingKeywordExpression operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest
 */
export type CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest = {
    
    /**
    * The keyword expression targeting the desired charge degree.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeDegreeUsingKeywordExpression
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetChargeDegreeUsingKeywordExpression
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetChargeDegreeUsingKeywordExpression
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetChargeDegreeUsingKeywordExpression
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getChargeGroup operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeGroupRequest
 */
export type CourtStandardsApiApiGetChargeGroupRequest = {
    
    /**
    * The chargeGroupId value of the desired charge group.
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeGroup
    */
    readonly chargeGroupId: string
    
}

/**
 * Request parameters for getChargeGroupsByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeGroupsByKeywordRequest
 */
export type CourtStandardsApiApiGetChargeGroupsByKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired charge group.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeGroupsByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetChargeGroupsByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetChargeGroupsByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetChargeGroupsByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getChargeSeverity operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeSeverityRequest
 */
export type CourtStandardsApiApiGetChargeSeverityRequest = {
    
    /**
    * The chargeSeverityId value of the desired charge severity.
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeSeverity
    */
    readonly chargeSeverityId: string
    
}

/**
 * Request parameters for getChargeSeverityByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargeSeverityByKeywordRequest
 */
export type CourtStandardsApiApiGetChargeSeverityByKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired charge severity.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargeSeverityByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetChargeSeverityByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetChargeSeverityByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetChargeSeverityByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getChargesUsingKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetChargesUsingKeywordRequest
 */
export type CourtStandardsApiApiGetChargesUsingKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired charge.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetChargesUsingKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetChargesUsingKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetChargesUsingKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetChargesUsingKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCourtLocation operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtLocationRequest
 */
export type CourtStandardsApiApiGetCourtLocationRequest = {
    
    /**
    * The keyword expression that sets forth the criteria concerning the court location or court locations to target. Keyword expressions should be constructed according to the rules shown above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtLocation
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCourtLocation
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCourtLocation
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCourtLocation
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCourtLocationObject operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtLocationObjectRequest
 */
export type CourtStandardsApiApiGetCourtLocationObjectRequest = {
    
    /**
    * courtLocationId
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtLocationObject
    */
    readonly courtLocationId: string
    
}

/**
 * Request parameters for getCourtLocations operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtLocationsRequest
 */
export type CourtStandardsApiApiGetCourtLocationsRequest = {
    
    /**
    * The courtId value of the target court.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtLocations
    */
    readonly courtId: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCourtLocations
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCourtLocations
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCourtLocations
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCourtObject operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtObjectRequest
 */
export type CourtStandardsApiApiGetCourtObjectRequest = {
    
    /**
    * The courtId value of the target court.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtObject
    */
    readonly courtId: string
    
}

/**
 * Request parameters for getCourtServiceStatus operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtServiceStatusRequest
 */
export type CourtStandardsApiApiGetCourtServiceStatusRequest = {
    
    /**
    * The keyword expression targeting the desired court. Keyword expressions should be constructed according to the rules given above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtServiceStatus
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCourtServiceStatus
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCourtServiceStatus
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCourtServiceStatus
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCourtServiceStatusById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtServiceStatusByIdRequest
 */
export type CourtStandardsApiApiGetCourtServiceStatusByIdRequest = {
    
    /**
    * The courtServiceStatusId value of the desired court.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtServiceStatusById
    */
    readonly courtServiceStatusId: string
    
}

/**
 * Request parameters for getCourtSystem operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtSystemRequest
 */
export type CourtStandardsApiApiGetCourtSystemRequest = {
    
    /**
    * The courtSystemId value of the court system to be retrieved.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtSystem
    */
    readonly courtSystemId: string
    
}

/**
 * Request parameters for getCourtTypeObject operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtTypeObjectRequest
 */
export type CourtStandardsApiApiGetCourtTypeObjectRequest = {
    
    /**
    * The courtTypeId value of the court type to be retrieved.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtTypeObject
    */
    readonly courtTypeId: string
    
}

/**
 * Request parameters for getCourtTypes operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtTypesRequest
 */
export type CourtStandardsApiApiGetCourtTypesRequest = {
    
    /**
    * The keyword expression that sets forth the criteria concerning the court type or court types. Keyword expressions should be constructed according to the rules shown above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtTypes
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCourtTypes
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCourtTypes
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCourtTypes
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCourts operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtsRequest
 */
export type CourtStandardsApiApiGetCourtsRequest = {
    
    /**
    * The keyword expression that sets forth the criteria concerning the court or courts to be retrieved. Keyword expressions should be constructed according to the rules shown above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourts
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCourts
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCourts
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCourts
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getCourtsByLocation operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetCourtsByLocationRequest
 */
export type CourtStandardsApiApiGetCourtsByLocationRequest = {
    
    /**
    * The courtLocationId value of the court location for which courts are to be retrieved.
    * @type {string}
    * @memberof CourtStandardsApiApiGetCourtsByLocation
    */
    readonly courtLocationId: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetCourtsByLocation
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetCourtsByLocation
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetCourtsByLocation
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getJudgeTypeObject operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetJudgeTypeObjectRequest
 */
export type CourtStandardsApiApiGetJudgeTypeObjectRequest = {
    
    /**
    * The keyword expression targeting the judge type.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetJudgeTypeObject
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetJudgeTypeObject
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetJudgeTypeObject
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetJudgeTypeObject
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getJudgeTypeObjectById operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetJudgeTypeObjectByIdRequest
 */
export type CourtStandardsApiApiGetJudgeTypeObjectByIdRequest = {
    
    /**
    * The judgeTypeId of the desired judge type.
    * @type {string}
    * @memberof CourtStandardsApiApiGetJudgeTypeObjectById
    */
    readonly judgeTypeId: string
    
}

/**
 * Request parameters for getJurisdictionGeo operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetJurisdictionGeoRequest
 */
export type CourtStandardsApiApiGetJurisdictionGeoRequest = {
    
    /**
    * The jurisdictionGeoId value of the desired jurisdiction geography.
    * @type {string}
    * @memberof CourtStandardsApiApiGetJurisdictionGeo
    */
    readonly jurisdictionGeoId: string
    
}

/**
 * Request parameters for getJurisdictionGeoForCourt operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetJurisdictionGeoForCourtRequest
 */
export type CourtStandardsApiApiGetJurisdictionGeoForCourtRequest = {
    
    /**
    * The keyword expression targeting the desired jurisdiction geography. Keyword expressions should be constructed according to the rules given above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoForCourt
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoForCourt
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'state'}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoForCourt
    */
    readonly sort?: 'state'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoForCourt
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getJurisdictionGeoObjectsForCourt operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest
 */
export type CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest = {
    
    /**
    * The courtId value of the target court.
    * @type {string}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoObjectsForCourt
    */
    readonly courtId: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoObjectsForCourt
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'state'}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoObjectsForCourt
    */
    readonly sort?: 'state'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetJurisdictionGeoObjectsForCourt
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getPartyRole operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetPartyRoleRequest
 */
export type CourtStandardsApiApiGetPartyRoleRequest = {
    
    /**
    * The partyRoleId value of the desired party role.
    * @type {string}
    * @memberof CourtStandardsApiApiGetPartyRole
    */
    readonly partyRoleId: string
    
}

/**
 * Request parameters for getPartyRoleGroup operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetPartyRoleGroupRequest
 */
export type CourtStandardsApiApiGetPartyRoleGroupRequest = {
    
    /**
    * The partyRoleGroupId value of the desired party role group.
    * @type {string}
    * @memberof CourtStandardsApiApiGetPartyRoleGroup
    */
    readonly partyRoleGroupId: string
    
}

/**
 * Request parameters for getPartyRoleGroups operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetPartyRoleGroupsRequest
 */
export type CourtStandardsApiApiGetPartyRoleGroupsRequest = {
    
    /**
    * The keyword expression targeting the desired party role group.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetPartyRoleGroups
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetPartyRoleGroups
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetPartyRoleGroups
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetPartyRoleGroups
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for getPartyRolesByKeyword operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiGetPartyRolesByKeywordRequest
 */
export type CourtStandardsApiApiGetPartyRolesByKeywordRequest = {
    
    /**
    * The keyword expression targeting the desired party role.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiGetPartyRolesByKeyword
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiGetPartyRolesByKeyword
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiGetPartyRolesByKeyword
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiGetPartyRolesByKeyword
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listAreaOfLaw operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiListAreaOfLawRequest
 */
export type CourtStandardsApiApiListAreaOfLawRequest = {
    
    /**
    * Retrieve one or more areas of law using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiListAreaOfLaw
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiListAreaOfLaw
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiListAreaOfLaw
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiListAreaOfLaw
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listCaseTypeGroups operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiListCaseTypeGroupsRequest
 */
export type CourtStandardsApiApiListCaseTypeGroupsRequest = {
    
    /**
    * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiListCaseTypeGroups
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiListCaseTypeGroups
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiListCaseTypeGroups
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiListCaseTypeGroups
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * Request parameters for listCourtSystems operation in CourtStandardsApiApi.
 * @export
 * @interface CourtStandardsApiApiListCourtSystemsRequest
 */
export type CourtStandardsApiApiListCourtSystemsRequest = {
    
    /**
    * The keyword expression that sets forth the criteria concerning the court system or court systems. Keyword expressions should be constructed according to the rules shown above.</a> 
    * @type {string}
    * @memberof CourtStandardsApiApiListCourtSystems
    */
    readonly q?: string
    
    /**
    * The page number of the results to be retrieved. - minimum: 1 - maximum: 100 
    * @type {number}
    * @memberof CourtStandardsApiApiListCourtSystems
    */
    readonly pageNumber?: number
    
    /**
    * The field according to which search results are to be sorted.
    * @type {'name'}
    * @memberof CourtStandardsApiApiListCourtSystems
    */
    readonly sort?: 'name'
    
    /**
    * Whether search results are to be shown in ascending or descending order.
    * @type {'asc' | 'desc'}
    * @memberof CourtStandardsApiApiListCourtSystems
    */
    readonly order?: 'asc' | 'desc'
    
}

/**
 * CourtStandardsApiApiGenerated - object-oriented interface
 * @export
 * @class CourtStandardsApiApiGenerated
 * @extends {BaseAPI}
 */
export class CourtStandardsApiApiGenerated extends BaseAPI {
    /**
     * Returns Associated Court for given Jurisdiction Geo. 
     * @summary Associated Court for given Jurisdiction Geo.
     * @param {CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public associatedCourtForJurisdictionGeo(requestParameters: CourtStandardsApiApiAssociatedCourtForJurisdictionGeoRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).associatedCourtForJurisdictionGeo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject 
     * @summary Charge Additional Data Object.
     * @param {CourtStandardsApiApiGetAdditionalChargeInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAdditionalChargeInfo(requestParameters: CourtStandardsApiApiGetAdditionalChargeInfoRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAdditionalChargeInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the appeals courts associated with the specified court. 
     * @summary Appeal Court Objects for given courtId.
     * @param {CourtStandardsApiApiGetAppealCourtsForCourtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAppealCourtsForCourt(requestParameters: CourtStandardsApiApiGetAppealCourtsForCourtRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAppealCourtsForCourt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified area of law. 
     * @summary AreaOfLaw Object for the given AreaOfLaw Id.
     * @param {CourtStandardsApiApiGetAreaOfLawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAreaOfLaw(requestParameters: CourtStandardsApiApiGetAreaOfLawRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAreaOfLaw(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above. ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject 
     * @summary Attorney Representation Type Object.
     * @param {CourtStandardsApiApiGetAttorneyRepTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAttorneyRepType(requestParameters: CourtStandardsApiApiGetAttorneyRepTypeRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAttorneyRepType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified attorney representation type. 
     * @summary Attorney Representation Type Object for the given attorneyRepresentationTypeId.
     * @param {CourtStandardsApiApiGetAttorneyRepType0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAttorneyRepType_1(requestParameters: CourtStandardsApiApiGetAttorneyRepType0Request, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAttorneyRepType_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specified attorney type object. 
     * @summary Attorney Type Object for given Attorney Type Id.
     * @param {CourtStandardsApiApiGetAttorneyTypeObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAttorneyTypeObject(requestParameters: CourtStandardsApiApiGetAttorneyTypeObjectRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAttorneyTypeObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject 
     * @summary Attorney Type Object.
     * @param {CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getAttorneyTypeUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetAttorneyTypeUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getAttorneyTypeUsingKeywordExpression(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified case class. 
     * @summary Case Class Object for the given Case Class Id.
     * @param {CourtStandardsApiApiGetCaseClassByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseClassById(requestParameters: CourtStandardsApiApiGetCaseClassByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseClassById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject 
     * @summary Case Class Object.
     * @param {CourtStandardsApiApiGetCaseClassByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseClassByKeyword(requestParameters: CourtStandardsApiApiGetCaseClassByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseClassByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified case relationship type. 
     * @summary Case Relationship Type Object for the given caseRelationshipTypeId.
     * @param {CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseRelationshipTypeById(requestParameters: CourtStandardsApiApiGetCaseRelationshipTypeByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseRelationshipTypeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject 
     * @summary Case Relationship Type Object.
     * @param {CourtStandardsApiApiGetCaseRelationshipTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseRelationshipTypes(requestParameters: CourtStandardsApiApiGetCaseRelationshipTypesRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseRelationshipTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified case status. 
     * @summary Returns the caseStatus information for the given caseStatusId.
     * @param {CourtStandardsApiApiGetCaseStatusByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseStatusById(requestParameters: CourtStandardsApiApiGetCaseStatusByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseStatusById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject 
     * @summary Case Status Object.
     * @param {CourtStandardsApiApiGetCaseStatusByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseStatusByKeyword(requestParameters: CourtStandardsApiApiGetCaseStatusByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseStatusByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified case status group. 
     * @summary Returns the caseStatusGroup information for the given caseStatusGroupId.
     * @param {CourtStandardsApiApiGetCaseStatusGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseStatusGroup(requestParameters: CourtStandardsApiApiGetCaseStatusGroupRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseStatusGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject 
     * @summary Case Status Group Object.
     * @param {CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseStatusGroupUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetCaseStatusGroupUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseStatusGroupUsingKeywordExpression(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified case type. 
     * @summary CaseType Object for given Case Type Id.
     * @param {CourtStandardsApiApiGetCaseTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseType(requestParameters: CourtStandardsApiApiGetCaseTypeRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified case type group. 
     * @summary CaseType Group for the given CaseType Group Id.
     * @param {CourtStandardsApiApiGetCaseTypeGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseTypeGroup(requestParameters: CourtStandardsApiApiGetCaseTypeGroupRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseTypeGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject 
     * @summary Case Type Object.
     * @param {CourtStandardsApiApiGetCaseTypesByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCaseTypesByKeyword(requestParameters: CourtStandardsApiApiGetCaseTypesByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCaseTypesByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified cause of action. 
     * @summary CauseOfAction Object for the given causeOfActionId.
     * @param {CourtStandardsApiApiGetCauseOfActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCauseOfAction(requestParameters: CourtStandardsApiApiGetCauseOfActionRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCauseOfAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject 
     * @summary CauseOfActionAdditionaData Object.
     * @param {CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCauseOfActionAdditionalData(requestParameters: CourtStandardsApiApiGetCauseOfActionAdditionalDataRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCauseOfActionAdditionalData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified cause of action additional data. 
     * @summary CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
     * @param {CourtStandardsApiApiGetCauseOfActionAdditionalData0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCauseOfActionAdditionalData_2(requestParameters: CourtStandardsApiApiGetCauseOfActionAdditionalData0Request, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCauseOfActionAdditionalData_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject 
     * @summary CauseOfAction Object.
     * @param {CourtStandardsApiApiGetCauseOfActionByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCauseOfActionByKeyword(requestParameters: CourtStandardsApiApiGetCauseOfActionByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCauseOfActionByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject 
     * @summary CauseOfActionGroup Object.
     * @param {CourtStandardsApiApiGetCauseOfActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCauseOfActionGroup(requestParameters: CourtStandardsApiApiGetCauseOfActionGroupRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCauseOfActionGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified cause of action group. 
     * @summary CauseOfActionGroup Object for the given causeOfActionGroupId.
     * @param {CourtStandardsApiApiGetCauseOfActionGroup0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCauseOfActionGroup_3(requestParameters: CourtStandardsApiApiGetCauseOfActionGroup0Request, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCauseOfActionGroup_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified charge additional data. 
     * @summary Charge Additional Data Object for the given chargeAdditionalDataId.
     * @param {CourtStandardsApiApiGetChargeAdditionalDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeAdditionalData(requestParameters: CourtStandardsApiApiGetChargeAdditionalDataRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeAdditionalData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified charge. 
     * @summary Charge Object for the given chargeId.
     * @param {CourtStandardsApiApiGetChargeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeById(requestParameters: CourtStandardsApiApiGetChargeByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified charge degree. 
     * @summary ChargeDegree Object for the given chargeDegreeId.
     * @param {CourtStandardsApiApiGetChargeDegreeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeDegreeById(requestParameters: CourtStandardsApiApiGetChargeDegreeByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeDegreeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject 
     * @summary ChargeDegree Object.
     * @param {CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeDegreeUsingKeywordExpression(requestParameters: CourtStandardsApiApiGetChargeDegreeUsingKeywordExpressionRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeDegreeUsingKeywordExpression(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified charge group. 
     * @summary Charge Group Object for the given chargeGroupId.
     * @param {CourtStandardsApiApiGetChargeGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeGroup(requestParameters: CourtStandardsApiApiGetChargeGroupRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject 
     * @summary Charge Group Object.
     * @param {CourtStandardsApiApiGetChargeGroupsByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeGroupsByKeyword(requestParameters: CourtStandardsApiApiGetChargeGroupsByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeGroupsByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified charge severity. 
     * @summary ChargeSeverity Object for the given chargeSeverityId.
     * @param {CourtStandardsApiApiGetChargeSeverityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeSeverity(requestParameters: CourtStandardsApiApiGetChargeSeverityRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeSeverity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject 
     * @summary ChargeSeverity Object.
     * @param {CourtStandardsApiApiGetChargeSeverityByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargeSeverityByKeyword(requestParameters: CourtStandardsApiApiGetChargeSeverityByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargeSeverityByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject 
     * @summary Charge Object.
     * @param {CourtStandardsApiApiGetChargesUsingKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getChargesUsingKeyword(requestParameters: CourtStandardsApiApiGetChargesUsingKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getChargesUsingKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified court location or court locations.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject 
     * @summary Courthouse Object.
     * @param {CourtStandardsApiApiGetCourtLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtLocation(requestParameters: CourtStandardsApiApiGetCourtLocationRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contains the Court Location Object. 
     * @summary Courthouse Object for given Court Location Id.
     * @param {CourtStandardsApiApiGetCourtLocationObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtLocationObject(requestParameters: CourtStandardsApiApiGetCourtLocationObjectRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtLocationObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the court locations associated with the specified court. 
     * @summary Associated Court Location for given courtId.
     * @param {CourtStandardsApiApiGetCourtLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtLocations(requestParameters: CourtStandardsApiApiGetCourtLocationsRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information about a specified court. 
     * @summary Court Object for given courtId.
     * @param {CourtStandardsApiApiGetCourtObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtObject(requestParameters: CourtStandardsApiApiGetCourtObjectRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the status of one or more courts using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject 
     * @summary Court Service Status Object.
     * @param {CourtStandardsApiApiGetCourtServiceStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtServiceStatus(requestParameters: CourtStandardsApiApiGetCourtServiceStatusRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtServiceStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the court status of the specified court. 
     * @summary Court Service Status Object for the given courtServiceStatusId.
     * @param {CourtStandardsApiApiGetCourtServiceStatusByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtServiceStatusById(requestParameters: CourtStandardsApiApiGetCourtServiceStatusByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtServiceStatusById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified court system. 
     * @summary Court System Object for given courtSystemId.
     * @param {CourtStandardsApiApiGetCourtSystemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtSystem(requestParameters: CourtStandardsApiApiGetCourtSystemRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtSystem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the information concerning the specific court type. 
     * @summary Court Type Object for given courtTypeId.
     * @param {CourtStandardsApiApiGetCourtTypeObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtTypeObject(requestParameters: CourtStandardsApiApiGetCourtTypeObjectRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtTypeObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve court types recognized by UniCourt.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject 
     * @summary Court Type Objects.
     * @param {CourtStandardsApiApiGetCourtTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtTypes(requestParameters: CourtStandardsApiApiGetCourtTypesRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information about a specified court or courts.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject 
     * @summary Court Objects.
     * @param {CourtStandardsApiApiGetCourtsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourts(requestParameters: CourtStandardsApiApiGetCourtsRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the courts associated with the specified court location. 
     * @summary Associated Court for given Court Location.
     * @param {CourtStandardsApiApiGetCourtsByLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getCourtsByLocation(requestParameters: CourtStandardsApiApiGetCourtsByLocationRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getCourtsByLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject 
     * @summary Judge Type Object.
     * @param {CourtStandardsApiApiGetJudgeTypeObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getJudgeTypeObject(requestParameters: CourtStandardsApiApiGetJudgeTypeObjectRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getJudgeTypeObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified judge type. 
     * @summary Judge Type Object for the given judgeTypeId.
     * @param {CourtStandardsApiApiGetJudgeTypeObjectByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getJudgeTypeObjectById(requestParameters: CourtStandardsApiApiGetJudgeTypeObjectByIdRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getJudgeTypeObjectById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified jurisdiction geography. 
     * @summary Jurisdiction Geo Object for given Jurisdiction Geo Id.
     * @param {CourtStandardsApiApiGetJurisdictionGeoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getJurisdictionGeo(requestParameters: CourtStandardsApiApiGetJurisdictionGeoRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getJurisdictionGeo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve one or more jurisdiction geographies using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject 
     * @summary Jurisdiction Geo Object.
     * @param {CourtStandardsApiApiGetJurisdictionGeoForCourtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getJurisdictionGeoForCourt(requestParameters: CourtStandardsApiApiGetJurisdictionGeoForCourtRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getJurisdictionGeoForCourt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the jurisdiction geography object for the specified court. 
     * @summary Jurisdiction Geo Objects for given courtId.
     * @param {CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getJurisdictionGeoObjectsForCourt(requestParameters: CourtStandardsApiApiGetJurisdictionGeoObjectsForCourtRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getJurisdictionGeoObjectsForCourt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified party role. 
     * @summary Party Role Object.
     * @param {CourtStandardsApiApiGetPartyRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getPartyRole(requestParameters: CourtStandardsApiApiGetPartyRoleRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getPartyRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the specified party role group. 
     * @summary Party Role Group Object.
     * @param {CourtStandardsApiApiGetPartyRoleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getPartyRoleGroup(requestParameters: CourtStandardsApiApiGetPartyRoleGroupRequest, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getPartyRoleGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject 
     * @summary Party Role Group Object.
     * @param {CourtStandardsApiApiGetPartyRoleGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getPartyRoleGroups(requestParameters: CourtStandardsApiApiGetPartyRoleGroupsRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getPartyRoleGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject 
     * @summary Party Role Object.
     * @param {CourtStandardsApiApiGetPartyRolesByKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public getPartyRolesByKeyword(requestParameters: CourtStandardsApiApiGetPartyRolesByKeywordRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).getPartyRolesByKeyword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The keyword expression targeting the desired area of law.   ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject 
     * @summary AreaOfLaw Object.
     * @param {CourtStandardsApiApiListAreaOfLawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public listAreaOfLaw(requestParameters: CourtStandardsApiApiListAreaOfLawRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).listAreaOfLaw(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject 
     * @summary CaseTypeGroup Object.
     * @param {CourtStandardsApiApiListCaseTypeGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public listCaseTypeGroups(requestParameters: CourtStandardsApiApiListCaseTypeGroupsRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).listCaseTypeGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information about the specified court system or court systems.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\"Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject 
     * @summary Court System Objects.
     * @param {CourtStandardsApiApiListCourtSystemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtStandardsApiApiGenerated
     */
    public listCourtSystems(requestParameters: CourtStandardsApiApiListCourtSystemsRequest = {}, options?: AxiosRequestConfig) {
        return CourtStandardsApiApiFp(this.configuration).listCourtSystems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
