/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CaseExportCallback } from '../models';
// @ts-ignore
import { CaseExportCallbackListResponse } from '../models';
// @ts-ignore
import { Exception } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CaseExportApiApi - axios parameter creator
 * @export
 */
export const CaseExportApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the specified case export callback object.
         * @summary Get Case Export Callback for a requested Case Export Callback Id.
         * @param {string} caseExportCallbackId The caseExportCallbackId value of the case export callback object to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackById: async (caseExportCallbackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseExportCallbackId' is not null or undefined
            assertParamExists('getCallbackById', 'caseExportCallbackId', caseExportCallbackId)
            const localVarPath = `/caseExport/callbacks/{caseExportCallbackId}`
                .replace(`{${"caseExportCallbackId"}}`, encodeURIComponent(String(caseExportCallbackId !== undefined ? caseExportCallbackId : `-caseExportCallbackId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseExport/callbacks/{caseExportCallbackId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve callbacks according to the specified criteria.
         * @summary Get Case Export Callback list for a requested Date.
         * @param {string} [date] The date for which callbacks are to be retrieved.
         * @param {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'} [status] The status code of the callbacks to be retrieved.
         * @param {number} [pageNumber] The page number of the callbacks to be retrieved.&lt;br&gt;   - Minimum: 1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackListForRequestedDate: async (date?: string, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseExport/callbacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseExport/callbacks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about the specified case export.
         * @summary Gets case exported for a requested Case ID.
         * @param {string} caseId The caseId value of the case for which case export information is to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseExportByCaseId: async (caseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getCaseExportByCaseId', 'caseId', caseId)
            const localVarPath = `/caseExport/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseExport/{caseId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseExportApiApi - functional programming interface
 * @export
 */
export const CaseExportApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaseExportApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the specified case export callback object.
         * @summary Get Case Export Callback for a requested Case Export Callback Id.
         * @param {CaseExportApiApiGetCallbackByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallbackById(requestParameters: CaseExportApiApiGetCallbackByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseExportCallback>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallbackById(requestParameters.caseExportCallbackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve callbacks according to the specified criteria.
         * @summary Get Case Export Callback list for a requested Date.
         * @param {CaseExportApiApiGetCallbackListForRequestedDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallbackListForRequestedDate(requestParameters: CaseExportApiApiGetCallbackListForRequestedDateRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseExportCallbackListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallbackListForRequestedDate(requestParameters.date, requestParameters.status, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information about the specified case export.
         * @summary Gets case exported for a requested Case ID.
         * @param {CaseExportApiApiGetCaseExportByCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseExportByCaseId(requestParameters: CaseExportApiApiGetCaseExportByCaseIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseExportCallback>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseExportByCaseId(requestParameters.caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CaseExportApiApi - factory interface
 * @export
 */
export const CaseExportApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaseExportApiApiFp(configuration)
    return {
        /**
         * Retrieve the specified case export callback object.
         * @summary Get Case Export Callback for a requested Case Export Callback Id.
         * @param {CaseExportApiApiGetCallbackByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackById(requestParameters: CaseExportApiApiGetCallbackByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseExportCallback> {
            return localVarFp.getCallbackById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve callbacks according to the specified criteria.
         * @summary Get Case Export Callback list for a requested Date.
         * @param {CaseExportApiApiGetCallbackListForRequestedDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackListForRequestedDate(requestParameters: CaseExportApiApiGetCallbackListForRequestedDateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseExportCallbackListResponse> {
            return localVarFp.getCallbackListForRequestedDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about the specified case export.
         * @summary Gets case exported for a requested Case ID.
         * @param {CaseExportApiApiGetCaseExportByCaseIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseExportByCaseId(requestParameters: CaseExportApiApiGetCaseExportByCaseIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseExportCallback> {
            return localVarFp.getCaseExportByCaseId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCallbackById operation in CaseExportApiApi.
 * @export
 * @interface CaseExportApiApiGetCallbackByIdRequest
 */
export type CaseExportApiApiGetCallbackByIdRequest = {
    
    /**
    * The caseExportCallbackId value of the case export callback object to be retrieved.
    * @type {string}
    * @memberof CaseExportApiApiGetCallbackById
    */
    readonly caseExportCallbackId: string
    
}

/**
 * Request parameters for getCallbackListForRequestedDate operation in CaseExportApiApi.
 * @export
 * @interface CaseExportApiApiGetCallbackListForRequestedDateRequest
 */
export type CaseExportApiApiGetCallbackListForRequestedDateRequest = {
    
    /**
    * The date for which callbacks are to be retrieved.
    * @type {string}
    * @memberof CaseExportApiApiGetCallbackListForRequestedDate
    */
    readonly date?: string
    
    /**
    * The status code of the callbacks to be retrieved.
    * @type {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'}
    * @memberof CaseExportApiApiGetCallbackListForRequestedDate
    */
    readonly status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'
    
    /**
    * The page number of the callbacks to be retrieved.<br>   - Minimum: 1 
    * @type {number}
    * @memberof CaseExportApiApiGetCallbackListForRequestedDate
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getCaseExportByCaseId operation in CaseExportApiApi.
 * @export
 * @interface CaseExportApiApiGetCaseExportByCaseIdRequest
 */
export type CaseExportApiApiGetCaseExportByCaseIdRequest = {
    
    /**
    * The caseId value of the case for which case export information is to be retrieved.
    * @type {string}
    * @memberof CaseExportApiApiGetCaseExportByCaseId
    */
    readonly caseId: string
    
}

/**
 * CaseExportApiApiGenerated - object-oriented interface
 * @export
 * @class CaseExportApiApiGenerated
 * @extends {BaseAPI}
 */
export class CaseExportApiApiGenerated extends BaseAPI {
    /**
     * Retrieve the specified case export callback object.
     * @summary Get Case Export Callback for a requested Case Export Callback Id.
     * @param {CaseExportApiApiGetCallbackByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseExportApiApiGenerated
     */
    public getCallbackById(requestParameters: CaseExportApiApiGetCallbackByIdRequest, options?: AxiosRequestConfig) {
        return CaseExportApiApiFp(this.configuration).getCallbackById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve callbacks according to the specified criteria.
     * @summary Get Case Export Callback list for a requested Date.
     * @param {CaseExportApiApiGetCallbackListForRequestedDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseExportApiApiGenerated
     */
    public getCallbackListForRequestedDate(requestParameters: CaseExportApiApiGetCallbackListForRequestedDateRequest = {}, options?: AxiosRequestConfig) {
        return CaseExportApiApiFp(this.configuration).getCallbackListForRequestedDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information about the specified case export.
     * @summary Gets case exported for a requested Case ID.
     * @param {CaseExportApiApiGetCaseExportByCaseIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseExportApiApiGenerated
     */
    public getCaseExportByCaseId(requestParameters: CaseExportApiApiGetCaseExportByCaseIdRequest, options?: AxiosRequestConfig) {
        return CaseExportApiApiFp(this.configuration).getCaseExportByCaseId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
