/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CaseDocument } from '../models';
// @ts-ignore
import { CaseDocumentOrderCallback } from '../models';
// @ts-ignore
import { CaseDocumentOrderCallbackListResponse } from '../models';
// @ts-ignore
import { CaseDocumentOrderPacerOptions } from '../models';
// @ts-ignore
import { CaseDocumentOrderRequest } from '../models';
// @ts-ignore
import { CaseDocuments } from '../models';
// @ts-ignore
import { CaseDocumentsApiGetDownloadableUrlForDocumentResponse } from '../models';
// @ts-ignore
import { Exception } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CaseDocumentsApiApi - axios parameter creator
 * @export
 */
export const CaseDocumentsApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Case Document Order for requested Document Ids.
         * @summary Add Case Document Order for requested Document Ids.
         * @param {CaseDocumentOrderRequest} [caseDocumentOrderRequest] If the Case Document Order is for Preview, then the value for &#x60;&#x60;isPreviewOnly&#x60;&#x60; should be &#x60;&#x60;true&#x60;&#x60; else &#x60;&#x60;false&#x60;&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocumentOrder: async (caseDocumentOrderRequest?: CaseDocumentOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseDocumentOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: caseDocumentOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseDocumentOrder',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(caseDocumentOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Case Document Order Callback for a requested Case Document Order Callback Id.
         * @summary Get Case Document Order Callback for a requested Case Document Order Callback Id.
         * @param {string} caseDocumentOrderCallbackId Unique Id for the Case Document Order Callback.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackById: async (caseDocumentOrderCallbackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseDocumentOrderCallbackId' is not null or undefined
            assertParamExists('getCallbackById', 'caseDocumentOrderCallbackId', caseDocumentOrderCallbackId)
            const localVarPath = `/caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}`
                .replace(`{${"caseDocumentOrderCallbackId"}}`, encodeURIComponent(String(caseDocumentOrderCallbackId !== undefined ? caseDocumentOrderCallbackId : `-caseDocumentOrderCallbackId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets details for a requested Document ID.
         * @summary Gets details for a requested Document ID.
         * @param {string} caseDocumentId Specific Case Dcoument ID for which you want the data for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentDetailsByDocumentId: async (caseDocumentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseDocumentId' is not null or undefined
            assertParamExists('getDocumentDetailsByDocumentId', 'caseDocumentId', caseDocumentId)
            const localVarPath = `/caseDocument/{caseDocumentId}`
                .replace(`{${"caseDocumentId"}}`, encodeURIComponent(String(caseDocumentId !== undefined ? caseDocumentId : `-caseDocumentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseDocument/{caseDocumentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets Documents for a requested Case ID.
         * @summary Gets Documents for a requested Case ID.
         * @param {string} caseId Case ID for which you want the data for.
         * @param {boolean} [inLibrary] Filter all the documents those are added to the UniCourt library.
         * @param {string} [afterFirstFetchDate] Get all the documents which were added to the case on or after a specific date.
         * @param {string} [libraryDate] Sort all the documents based on the date when the document was added to the UniCourt Library.
         * @param {string} [firstFetchDate] Sort all the documents based on the date it was fetched from the source site.
         * @param {'latest to oldest' | 'oldest to latest'} [sortBy] Sort documents with document order.
         * @param {number} [pageNumber] The page for which the result should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsForCase: async (caseId: string, inLibrary?: boolean, afterFirstFetchDate?: string, libraryDate?: string, firstFetchDate?: string, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getDocumentsForCase', 'caseId', caseId)
            const localVarPath = `/case/{caseId}/documents`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (inLibrary !== undefined) {
                localVarQueryParameter['inLibrary'] = inLibrary;
            }

            if (afterFirstFetchDate !== undefined) {
                localVarQueryParameter['afterFirstFetchDate'] = (afterFirstFetchDate as any instanceof Date) ?
                    (afterFirstFetchDate as any).toISOString() :
                    afterFirstFetchDate;
            }

            if (libraryDate !== undefined) {
                localVarQueryParameter['libraryDate'] = (libraryDate as any instanceof Date) ?
                    (libraryDate as any).toISOString() :
                    libraryDate;
            }

            if (firstFetchDate !== undefined) {
                localVarQueryParameter['firstFetchDate'] = (firstFetchDate as any instanceof Date) ?
                    (firstFetchDate as any).toISOString() :
                    firstFetchDate;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/case/{caseId}/documents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets downloadable URL for a requested Document ID.
         * @summary Gets downloadable URL for a requested Document ID.
         * @param {string} caseDocumentId Document ID which you want to download.
         * @param {boolean} [isPreviewDocument] If the document you want to download is a preview of a document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadableUrlForDocument: async (caseDocumentId: string, isPreviewDocument?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseDocumentId' is not null or undefined
            assertParamExists('getDownloadableUrlForDocument', 'caseDocumentId', caseDocumentId)
            const localVarPath = `/caseDocumentDownload/{caseDocumentId}`
                .replace(`{${"caseDocumentId"}}`, encodeURIComponent(String(caseDocumentId !== undefined ? caseDocumentId : `-caseDocumentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (isPreviewDocument !== undefined) {
                localVarQueryParameter['isPreviewDocument'] = isPreviewDocument;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseDocumentDownload/{caseDocumentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Case Document Order Callback list for a requested Date.
         * @summary Get Case Document Order Callback list for a requested Date.
         * @param {string} [date] Date for which fetch the Case Document Order Callback list. By default, the date will be set to current date.
         * @param {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'} [status] Status of Document Order callbacks. Default status will fetch all callbacks.
         * @param {number} [pageNumber] Page to fetch the Case Document Order Callback list.&lt;br&gt;   - Minimum: 1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentOrderCallbacks: async (date?: string, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseDocumentOrder/callbacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseDocumentOrder/callbacks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseDocumentsApiApi - functional programming interface
 * @export
 */
export const CaseDocumentsApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaseDocumentsApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Case Document Order for requested Document Ids.
         * @summary Add Case Document Order for requested Document Ids.
         * @param {CaseDocumentsApiApiAddDocumentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDocumentOrder(requestParameters: CaseDocumentsApiApiAddDocumentOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDocumentOrderCallback>> {
            const caseDocumentOrderRequest: CaseDocumentOrderRequest = {
                caseDocumentId: requestParameters.caseDocumentId,
                isPreviewOnly: requestParameters.isPreviewOnly,
                pacerOptions: requestParameters.pacerOptions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDocumentOrder(caseDocumentOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Case Document Order Callback for a requested Case Document Order Callback Id.
         * @summary Get Case Document Order Callback for a requested Case Document Order Callback Id.
         * @param {CaseDocumentsApiApiGetCallbackByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallbackById(requestParameters: CaseDocumentsApiApiGetCallbackByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDocumentOrderCallback>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallbackById(requestParameters.caseDocumentOrderCallbackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets details for a requested Document ID.
         * @summary Gets details for a requested Document ID.
         * @param {CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentDetailsByDocumentId(requestParameters: CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentDetailsByDocumentId(requestParameters.caseDocumentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets Documents for a requested Case ID.
         * @summary Gets Documents for a requested Case ID.
         * @param {CaseDocumentsApiApiGetDocumentsForCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentsForCase(requestParameters: CaseDocumentsApiApiGetDocumentsForCaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentsForCase(requestParameters.caseId, requestParameters.inLibrary, requestParameters.afterFirstFetchDate, requestParameters.libraryDate, requestParameters.firstFetchDate, requestParameters.sortBy, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets downloadable URL for a requested Document ID.
         * @summary Gets downloadable URL for a requested Document ID.
         * @param {CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadableUrlForDocument(requestParameters: CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDocumentsApiGetDownloadableUrlForDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadableUrlForDocument(requestParameters.caseDocumentId, requestParameters.isPreviewDocument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Case Document Order Callback list for a requested Date.
         * @summary Get Case Document Order Callback list for a requested Date.
         * @param {CaseDocumentsApiApiListDocumentOrderCallbacksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDocumentOrderCallbacks(requestParameters: CaseDocumentsApiApiListDocumentOrderCallbacksRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseDocumentOrderCallbackListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDocumentOrderCallbacks(requestParameters.date, requestParameters.status, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CaseDocumentsApiApi - factory interface
 * @export
 */
export const CaseDocumentsApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaseDocumentsApiApiFp(configuration)
    return {
        /**
         * Add Case Document Order for requested Document Ids.
         * @summary Add Case Document Order for requested Document Ids.
         * @param {CaseDocumentsApiApiAddDocumentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocumentOrder(requestParameters: CaseDocumentsApiApiAddDocumentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<CaseDocumentOrderCallback> {
            return localVarFp.addDocumentOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Case Document Order Callback for a requested Case Document Order Callback Id.
         * @summary Get Case Document Order Callback for a requested Case Document Order Callback Id.
         * @param {CaseDocumentsApiApiGetCallbackByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallbackById(requestParameters: CaseDocumentsApiApiGetCallbackByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseDocumentOrderCallback> {
            return localVarFp.getCallbackById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets details for a requested Document ID.
         * @summary Gets details for a requested Document ID.
         * @param {CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentDetailsByDocumentId(requestParameters: CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest, options?: AxiosRequestConfig): AxiosPromise<CaseDocument> {
            return localVarFp.getDocumentDetailsByDocumentId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets Documents for a requested Case ID.
         * @summary Gets Documents for a requested Case ID.
         * @param {CaseDocumentsApiApiGetDocumentsForCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentsForCase(requestParameters: CaseDocumentsApiApiGetDocumentsForCaseRequest, options?: AxiosRequestConfig): AxiosPromise<CaseDocuments> {
            return localVarFp.getDocumentsForCase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets downloadable URL for a requested Document ID.
         * @summary Gets downloadable URL for a requested Document ID.
         * @param {CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadableUrlForDocument(requestParameters: CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<CaseDocumentsApiGetDownloadableUrlForDocumentResponse> {
            return localVarFp.getDownloadableUrlForDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Case Document Order Callback list for a requested Date.
         * @summary Get Case Document Order Callback list for a requested Date.
         * @param {CaseDocumentsApiApiListDocumentOrderCallbacksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentOrderCallbacks(requestParameters: CaseDocumentsApiApiListDocumentOrderCallbacksRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseDocumentOrderCallbackListResponse> {
            return localVarFp.listDocumentOrderCallbacks(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDocumentOrder operation in CaseDocumentsApiApi.
 * @export
 * @interface CaseDocumentsApiApiAddDocumentOrderRequest
 */
export type CaseDocumentsApiApiAddDocumentOrderRequest = {
    
} & CaseDocumentOrderRequest

/**
 * Request parameters for getCallbackById operation in CaseDocumentsApiApi.
 * @export
 * @interface CaseDocumentsApiApiGetCallbackByIdRequest
 */
export type CaseDocumentsApiApiGetCallbackByIdRequest = {
    
    /**
    * Unique Id for the Case Document Order Callback.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetCallbackById
    */
    readonly caseDocumentOrderCallbackId: string
    
}

/**
 * Request parameters for getDocumentDetailsByDocumentId operation in CaseDocumentsApiApi.
 * @export
 * @interface CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest
 */
export type CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest = {
    
    /**
    * Specific Case Dcoument ID for which you want the data for.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetDocumentDetailsByDocumentId
    */
    readonly caseDocumentId: string
    
}

/**
 * Request parameters for getDocumentsForCase operation in CaseDocumentsApiApi.
 * @export
 * @interface CaseDocumentsApiApiGetDocumentsForCaseRequest
 */
export type CaseDocumentsApiApiGetDocumentsForCaseRequest = {
    
    /**
    * Case ID for which you want the data for.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly caseId: string
    
    /**
    * Filter all the documents those are added to the UniCourt library.
    * @type {boolean}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly inLibrary?: boolean
    
    /**
    * Get all the documents which were added to the case on or after a specific date.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly afterFirstFetchDate?: string
    
    /**
    * Sort all the documents based on the date when the document was added to the UniCourt Library.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly libraryDate?: string
    
    /**
    * Sort all the documents based on the date it was fetched from the source site.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly firstFetchDate?: string
    
    /**
    * Sort documents with document order.
    * @type {'latest to oldest' | 'oldest to latest'}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly sortBy?: 'latest to oldest' | 'oldest to latest'
    
    /**
    * The page for which the result should be retrieved.
    * @type {number}
    * @memberof CaseDocumentsApiApiGetDocumentsForCase
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for getDownloadableUrlForDocument operation in CaseDocumentsApiApi.
 * @export
 * @interface CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest
 */
export type CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest = {
    
    /**
    * Document ID which you want to download.
    * @type {string}
    * @memberof CaseDocumentsApiApiGetDownloadableUrlForDocument
    */
    readonly caseDocumentId: string
    
    /**
    * If the document you want to download is a preview of a document.
    * @type {boolean}
    * @memberof CaseDocumentsApiApiGetDownloadableUrlForDocument
    */
    readonly isPreviewDocument?: boolean
    
}

/**
 * Request parameters for listDocumentOrderCallbacks operation in CaseDocumentsApiApi.
 * @export
 * @interface CaseDocumentsApiApiListDocumentOrderCallbacksRequest
 */
export type CaseDocumentsApiApiListDocumentOrderCallbacksRequest = {
    
    /**
    * Date for which fetch the Case Document Order Callback list. By default, the date will be set to current date.
    * @type {string}
    * @memberof CaseDocumentsApiApiListDocumentOrderCallbacks
    */
    readonly date?: string
    
    /**
    * Status of Document Order callbacks. Default status will fetch all callbacks.
    * @type {'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'}
    * @memberof CaseDocumentsApiApiListDocumentOrderCallbacks
    */
    readonly status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE'
    
    /**
    * Page to fetch the Case Document Order Callback list.<br>   - Minimum: 1 
    * @type {number}
    * @memberof CaseDocumentsApiApiListDocumentOrderCallbacks
    */
    readonly pageNumber?: number
    
}

/**
 * CaseDocumentsApiApiGenerated - object-oriented interface
 * @export
 * @class CaseDocumentsApiApiGenerated
 * @extends {BaseAPI}
 */
export class CaseDocumentsApiApiGenerated extends BaseAPI {
    /**
     * Add Case Document Order for requested Document Ids.
     * @summary Add Case Document Order for requested Document Ids.
     * @param {CaseDocumentsApiApiAddDocumentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocumentsApiApiGenerated
     */
    public addDocumentOrder(requestParameters: CaseDocumentsApiApiAddDocumentOrderRequest, options?: AxiosRequestConfig) {
        return CaseDocumentsApiApiFp(this.configuration).addDocumentOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Case Document Order Callback for a requested Case Document Order Callback Id.
     * @summary Get Case Document Order Callback for a requested Case Document Order Callback Id.
     * @param {CaseDocumentsApiApiGetCallbackByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocumentsApiApiGenerated
     */
    public getCallbackById(requestParameters: CaseDocumentsApiApiGetCallbackByIdRequest, options?: AxiosRequestConfig) {
        return CaseDocumentsApiApiFp(this.configuration).getCallbackById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets details for a requested Document ID.
     * @summary Gets details for a requested Document ID.
     * @param {CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocumentsApiApiGenerated
     */
    public getDocumentDetailsByDocumentId(requestParameters: CaseDocumentsApiApiGetDocumentDetailsByDocumentIdRequest, options?: AxiosRequestConfig) {
        return CaseDocumentsApiApiFp(this.configuration).getDocumentDetailsByDocumentId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets Documents for a requested Case ID.
     * @summary Gets Documents for a requested Case ID.
     * @param {CaseDocumentsApiApiGetDocumentsForCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocumentsApiApiGenerated
     */
    public getDocumentsForCase(requestParameters: CaseDocumentsApiApiGetDocumentsForCaseRequest, options?: AxiosRequestConfig) {
        return CaseDocumentsApiApiFp(this.configuration).getDocumentsForCase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets downloadable URL for a requested Document ID.
     * @summary Gets downloadable URL for a requested Document ID.
     * @param {CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocumentsApiApiGenerated
     */
    public getDownloadableUrlForDocument(requestParameters: CaseDocumentsApiApiGetDownloadableUrlForDocumentRequest, options?: AxiosRequestConfig) {
        return CaseDocumentsApiApiFp(this.configuration).getDownloadableUrlForDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Case Document Order Callback list for a requested Date.
     * @summary Get Case Document Order Callback list for a requested Date.
     * @param {CaseDocumentsApiApiListDocumentOrderCallbacksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseDocumentsApiApiGenerated
     */
    public listDocumentOrderCallbacks(requestParameters: CaseDocumentsApiApiListDocumentOrderCallbacksRequest = {}, options?: AxiosRequestConfig) {
        return CaseDocumentsApiApiFp(this.configuration).listDocumentOrderCallbacks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
