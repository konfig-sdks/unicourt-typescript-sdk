/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CaseTrack } from '../models';
// @ts-ignore
import { CaseTrackListResponse } from '../models';
// @ts-ignore
import { CaseTrackRequest } from '../models';
// @ts-ignore
import { CaseTrackSchedule } from '../models';
// @ts-ignore
import { CaseUpdateRequest } from '../models';
// @ts-ignore
import { Exception } from '../models';
// @ts-ignore
import { Success } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CaseTrackingApiApi - axios parameter creator
 * @export
 */
export const CaseTrackingApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Track the specified case.
         * @summary Add Case Track for the requested Case Id.
         * @param {CaseTrackRequest} [caseTrackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCaseTrack: async (caseTrackRequest?: CaseTrackRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseTrack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: caseTrackRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseTrack',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(caseTrackRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve case tracking information for the specified caseId value.
         * @summary Get Case Track for a requested Case Id.
         * @param {string} caseId The caseId value for which case tracking information is to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTrack: async (caseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('getCaseTrack', 'caseId', caseId)
            const localVarPath = `/caseTrack/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseTrack/{caseId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all tracked cases.
         * @summary Get Case Track list.
         * @param {string} [lastFetchDate] The lastFetchDate value of the tracked case. The date value should be entered in the format YYYY-MM-DDTHH:MM:SS+ZZ:zz. 
         * @param {string} [lastFetchDateWithUpdates] The date on which changes were last found in the case information. 
         * @param {number} [pageNumber] The page number of the results to be retrieved.&lt;br&gt;   - Minimum: 1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTrackList: async (lastFetchDate?: string, lastFetchDateWithUpdates?: string, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/caseTracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (lastFetchDate !== undefined) {
                localVarQueryParameter['lastFetchDate'] = (lastFetchDate as any instanceof Date) ?
                    (lastFetchDate as any).toISOString() :
                    lastFetchDate;
            }

            if (lastFetchDateWithUpdates !== undefined) {
                localVarQueryParameter['lastFetchDateWithUpdates'] = (lastFetchDateWithUpdates as any instanceof Date) ?
                    (lastFetchDateWithUpdates as any).toISOString() :
                    lastFetchDateWithUpdates;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseTracks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove Case Track for a specific Case Id.
         * @summary Remove Case Track for a specific Case Id.
         * @param {string} caseId The caseId value for which case tracking information is to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCaseTrackById: async (caseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('removeCaseTrackById', 'caseId', caseId)
            const localVarPath = `/caseTrack/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId !== undefined ? caseId : `-caseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/caseTrack/{caseId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseTrackingApiApi - functional programming interface
 * @export
 */
export const CaseTrackingApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CaseTrackingApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Track the specified case.
         * @summary Add Case Track for the requested Case Id.
         * @param {CaseTrackingApiApiAddCaseTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCaseTrack(requestParameters: CaseTrackingApiApiAddCaseTrackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const caseTrackRequest: CaseTrackRequest = {
                caseTrackParams: requestParameters.caseTrackParams,
                schedule: requestParameters.schedule
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCaseTrack(caseTrackRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve case tracking information for the specified caseId value.
         * @summary Get Case Track for a requested Case Id.
         * @param {CaseTrackingApiApiGetCaseTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseTrack(requestParameters: CaseTrackingApiApiGetCaseTrackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseTrack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseTrack(requestParameters.caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of all tracked cases.
         * @summary Get Case Track list.
         * @param {CaseTrackingApiApiGetCaseTrackListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseTrackList(requestParameters: CaseTrackingApiApiGetCaseTrackListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseTrackListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseTrackList(requestParameters.lastFetchDate, requestParameters.lastFetchDateWithUpdates, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove Case Track for a specific Case Id.
         * @summary Remove Case Track for a specific Case Id.
         * @param {CaseTrackingApiApiRemoveCaseTrackByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCaseTrackById(requestParameters: CaseTrackingApiApiRemoveCaseTrackByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCaseTrackById(requestParameters.caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CaseTrackingApiApi - factory interface
 * @export
 */
export const CaseTrackingApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CaseTrackingApiApiFp(configuration)
    return {
        /**
         * Track the specified case.
         * @summary Add Case Track for the requested Case Id.
         * @param {CaseTrackingApiApiAddCaseTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCaseTrack(requestParameters: CaseTrackingApiApiAddCaseTrackRequest, options?: AxiosRequestConfig): AxiosPromise<Success> {
            return localVarFp.addCaseTrack(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve case tracking information for the specified caseId value.
         * @summary Get Case Track for a requested Case Id.
         * @param {CaseTrackingApiApiGetCaseTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTrack(requestParameters: CaseTrackingApiApiGetCaseTrackRequest, options?: AxiosRequestConfig): AxiosPromise<CaseTrack> {
            return localVarFp.getCaseTrack(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all tracked cases.
         * @summary Get Case Track list.
         * @param {CaseTrackingApiApiGetCaseTrackListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseTrackList(requestParameters: CaseTrackingApiApiGetCaseTrackListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CaseTrackListResponse> {
            return localVarFp.getCaseTrackList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove Case Track for a specific Case Id.
         * @summary Remove Case Track for a specific Case Id.
         * @param {CaseTrackingApiApiRemoveCaseTrackByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCaseTrackById(requestParameters: CaseTrackingApiApiRemoveCaseTrackByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Success> {
            return localVarFp.removeCaseTrackById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCaseTrack operation in CaseTrackingApiApi.
 * @export
 * @interface CaseTrackingApiApiAddCaseTrackRequest
 */
export type CaseTrackingApiApiAddCaseTrackRequest = {
    
} & CaseTrackRequest

/**
 * Request parameters for getCaseTrack operation in CaseTrackingApiApi.
 * @export
 * @interface CaseTrackingApiApiGetCaseTrackRequest
 */
export type CaseTrackingApiApiGetCaseTrackRequest = {
    
    /**
    * The caseId value for which case tracking information is to be retrieved.
    * @type {string}
    * @memberof CaseTrackingApiApiGetCaseTrack
    */
    readonly caseId: string
    
}

/**
 * Request parameters for getCaseTrackList operation in CaseTrackingApiApi.
 * @export
 * @interface CaseTrackingApiApiGetCaseTrackListRequest
 */
export type CaseTrackingApiApiGetCaseTrackListRequest = {
    
    /**
    * The lastFetchDate value of the tracked case. The date value should be entered in the format YYYY-MM-DDTHH:MM:SS+ZZ:zz. 
    * @type {string}
    * @memberof CaseTrackingApiApiGetCaseTrackList
    */
    readonly lastFetchDate?: string
    
    /**
    * The date on which changes were last found in the case information. 
    * @type {string}
    * @memberof CaseTrackingApiApiGetCaseTrackList
    */
    readonly lastFetchDateWithUpdates?: string
    
    /**
    * The page number of the results to be retrieved.<br>   - Minimum: 1 
    * @type {number}
    * @memberof CaseTrackingApiApiGetCaseTrackList
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for removeCaseTrackById operation in CaseTrackingApiApi.
 * @export
 * @interface CaseTrackingApiApiRemoveCaseTrackByIdRequest
 */
export type CaseTrackingApiApiRemoveCaseTrackByIdRequest = {
    
    /**
    * The caseId value for which case tracking information is to be retrieved.
    * @type {string}
    * @memberof CaseTrackingApiApiRemoveCaseTrackById
    */
    readonly caseId: string
    
}

/**
 * CaseTrackingApiApiGenerated - object-oriented interface
 * @export
 * @class CaseTrackingApiApiGenerated
 * @extends {BaseAPI}
 */
export class CaseTrackingApiApiGenerated extends BaseAPI {
    /**
     * Track the specified case.
     * @summary Add Case Track for the requested Case Id.
     * @param {CaseTrackingApiApiAddCaseTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTrackingApiApiGenerated
     */
    public addCaseTrack(requestParameters: CaseTrackingApiApiAddCaseTrackRequest, options?: AxiosRequestConfig) {
        return CaseTrackingApiApiFp(this.configuration).addCaseTrack(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve case tracking information for the specified caseId value.
     * @summary Get Case Track for a requested Case Id.
     * @param {CaseTrackingApiApiGetCaseTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTrackingApiApiGenerated
     */
    public getCaseTrack(requestParameters: CaseTrackingApiApiGetCaseTrackRequest, options?: AxiosRequestConfig) {
        return CaseTrackingApiApiFp(this.configuration).getCaseTrack(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all tracked cases.
     * @summary Get Case Track list.
     * @param {CaseTrackingApiApiGetCaseTrackListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTrackingApiApiGenerated
     */
    public getCaseTrackList(requestParameters: CaseTrackingApiApiGetCaseTrackListRequest = {}, options?: AxiosRequestConfig) {
        return CaseTrackingApiApiFp(this.configuration).getCaseTrackList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove Case Track for a specific Case Id.
     * @summary Remove Case Track for a specific Case Id.
     * @param {CaseTrackingApiApiRemoveCaseTrackByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTrackingApiApiGenerated
     */
    public removeCaseTrackById(requestParameters: CaseTrackingApiApiRemoveCaseTrackByIdRequest, options?: AxiosRequestConfig) {
        return CaseTrackingApiApiFp(this.configuration).removeCaseTrackById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
