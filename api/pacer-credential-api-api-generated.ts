/* tslint:disable */
/* eslint-disable */
/*
UniCourt Enterprise APIs

<button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button>


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Exception } from '../models';
// @ts-ignore
import { PacerCredential } from '../models';
// @ts-ignore
import { PacerCredentialListResponse } from '../models';
// @ts-ignore
import { PacerCredentialRequest } from '../models';
// @ts-ignore
import { Success } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PacerCredentialApiApi - axios parameter creator
 * @export
 */
export const PacerCredentialApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the PACER credentials for the specified PACER username.
         * @summary Get Pacer Credential for a requested pacer User Id.
         * @param {string} pacerUserId The PACER username for which PACER credentials are to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPacerCredential: async (pacerUserId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('getPacerCredential', 'pacerUserId', pacerUserId)
            const localVarPath = `/pacerCredential/{pacerUserId}`
                .replace(`{${"pacerUserId"}}`, encodeURIComponent(String(pacerUserId !== undefined ? pacerUserId : `-pacerUserId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCredential/{pacerUserId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List registered PACER credentials.
         * @summary Get Pacer Credential List.
         * @param {number} [pageNumber] The page number of the PACER credentials to be retrieved.&lt;br&gt;   - Minimum: 1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPacerCredentials: async (pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pacerCredential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCredential',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register PACER credentials with UniCourt.
         * @summary Add Pacer Credential.
         * @param {PacerCredentialRequest} [pacerCredentialRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPacerCredential: async (pacerCredentialRequest?: PacerCredentialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pacerCredential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pacerCredentialRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCredential',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pacerCredentialRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * De-register the PACER credentials for the specified PACER username.
         * @summary Remove Pacer credential for a specific Pacer User Id.
         * @param {string} pacerUserId The PACER username for which PACER credentials are to be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForUserId: async (pacerUserId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pacerUserId' is not null or undefined
            assertParamExists('removeForUserId', 'pacerUserId', pacerUserId)
            const localVarPath = `/pacerCredential/{pacerUserId}`
                .replace(`{${"pacerUserId"}}`, encodeURIComponent(String(pacerUserId !== undefined ? pacerUserId : `-pacerUserId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pacerCredential/{pacerUserId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PacerCredentialApiApi - functional programming interface
 * @export
 */
export const PacerCredentialApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PacerCredentialApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the PACER credentials for the specified PACER username.
         * @summary Get Pacer Credential for a requested pacer User Id.
         * @param {PacerCredentialApiApiGetPacerCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPacerCredential(requestParameters: PacerCredentialApiApiGetPacerCredentialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PacerCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPacerCredential(requestParameters.pacerUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List registered PACER credentials.
         * @summary Get Pacer Credential List.
         * @param {PacerCredentialApiApiListPacerCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPacerCredentials(requestParameters: PacerCredentialApiApiListPacerCredentialsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PacerCredentialListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPacerCredentials(requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register PACER credentials with UniCourt.
         * @summary Add Pacer Credential.
         * @param {PacerCredentialApiApiRegisterPacerCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPacerCredential(requestParameters: PacerCredentialApiApiRegisterPacerCredentialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const pacerCredentialRequest: PacerCredentialRequest = {
                defaultPacerClientCode: requestParameters.defaultPacerClientCode,
                pacerUserId: requestParameters.pacerUserId,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPacerCredential(pacerCredentialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * De-register the PACER credentials for the specified PACER username.
         * @summary Remove Pacer credential for a specific Pacer User Id.
         * @param {PacerCredentialApiApiRemoveForUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeForUserId(requestParameters: PacerCredentialApiApiRemoveForUserIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeForUserId(requestParameters.pacerUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PacerCredentialApiApi - factory interface
 * @export
 */
export const PacerCredentialApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PacerCredentialApiApiFp(configuration)
    return {
        /**
         * Retrieve the PACER credentials for the specified PACER username.
         * @summary Get Pacer Credential for a requested pacer User Id.
         * @param {PacerCredentialApiApiGetPacerCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPacerCredential(requestParameters: PacerCredentialApiApiGetPacerCredentialRequest, options?: AxiosRequestConfig): AxiosPromise<PacerCredential> {
            return localVarFp.getPacerCredential(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List registered PACER credentials.
         * @summary Get Pacer Credential List.
         * @param {PacerCredentialApiApiListPacerCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPacerCredentials(requestParameters: PacerCredentialApiApiListPacerCredentialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PacerCredentialListResponse> {
            return localVarFp.listPacerCredentials(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Register PACER credentials with UniCourt.
         * @summary Add Pacer Credential.
         * @param {PacerCredentialApiApiRegisterPacerCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPacerCredential(requestParameters: PacerCredentialApiApiRegisterPacerCredentialRequest, options?: AxiosRequestConfig): AxiosPromise<Success> {
            return localVarFp.registerPacerCredential(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * De-register the PACER credentials for the specified PACER username.
         * @summary Remove Pacer credential for a specific Pacer User Id.
         * @param {PacerCredentialApiApiRemoveForUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForUserId(requestParameters: PacerCredentialApiApiRemoveForUserIdRequest, options?: AxiosRequestConfig): AxiosPromise<Success> {
            return localVarFp.removeForUserId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPacerCredential operation in PacerCredentialApiApi.
 * @export
 * @interface PacerCredentialApiApiGetPacerCredentialRequest
 */
export type PacerCredentialApiApiGetPacerCredentialRequest = {
    
    /**
    * The PACER username for which PACER credentials are to be retrieved.
    * @type {string}
    * @memberof PacerCredentialApiApiGetPacerCredential
    */
    readonly pacerUserId: string
    
}

/**
 * Request parameters for listPacerCredentials operation in PacerCredentialApiApi.
 * @export
 * @interface PacerCredentialApiApiListPacerCredentialsRequest
 */
export type PacerCredentialApiApiListPacerCredentialsRequest = {
    
    /**
    * The page number of the PACER credentials to be retrieved.<br>   - Minimum: 1 
    * @type {number}
    * @memberof PacerCredentialApiApiListPacerCredentials
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for registerPacerCredential operation in PacerCredentialApiApi.
 * @export
 * @interface PacerCredentialApiApiRegisterPacerCredentialRequest
 */
export type PacerCredentialApiApiRegisterPacerCredentialRequest = {
    
} & PacerCredentialRequest

/**
 * Request parameters for removeForUserId operation in PacerCredentialApiApi.
 * @export
 * @interface PacerCredentialApiApiRemoveForUserIdRequest
 */
export type PacerCredentialApiApiRemoveForUserIdRequest = {
    
    /**
    * The PACER username for which PACER credentials are to be retrieved.
    * @type {string}
    * @memberof PacerCredentialApiApiRemoveForUserId
    */
    readonly pacerUserId: string
    
}

/**
 * PacerCredentialApiApiGenerated - object-oriented interface
 * @export
 * @class PacerCredentialApiApiGenerated
 * @extends {BaseAPI}
 */
export class PacerCredentialApiApiGenerated extends BaseAPI {
    /**
     * Retrieve the PACER credentials for the specified PACER username.
     * @summary Get Pacer Credential for a requested pacer User Id.
     * @param {PacerCredentialApiApiGetPacerCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerCredentialApiApiGenerated
     */
    public getPacerCredential(requestParameters: PacerCredentialApiApiGetPacerCredentialRequest, options?: AxiosRequestConfig) {
        return PacerCredentialApiApiFp(this.configuration).getPacerCredential(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List registered PACER credentials.
     * @summary Get Pacer Credential List.
     * @param {PacerCredentialApiApiListPacerCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerCredentialApiApiGenerated
     */
    public listPacerCredentials(requestParameters: PacerCredentialApiApiListPacerCredentialsRequest = {}, options?: AxiosRequestConfig) {
        return PacerCredentialApiApiFp(this.configuration).listPacerCredentials(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register PACER credentials with UniCourt.
     * @summary Add Pacer Credential.
     * @param {PacerCredentialApiApiRegisterPacerCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerCredentialApiApiGenerated
     */
    public registerPacerCredential(requestParameters: PacerCredentialApiApiRegisterPacerCredentialRequest, options?: AxiosRequestConfig) {
        return PacerCredentialApiApiFp(this.configuration).registerPacerCredential(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * De-register the PACER credentials for the specified PACER username.
     * @summary Remove Pacer credential for a specific Pacer User Id.
     * @param {PacerCredentialApiApiRemoveForUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PacerCredentialApiApiGenerated
     */
    public removeForUserId(requestParameters: PacerCredentialApiApiRemoveForUserIdRequest, options?: AxiosRequestConfig) {
        return PacerCredentialApiApiFp(this.configuration).removeForUserId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
